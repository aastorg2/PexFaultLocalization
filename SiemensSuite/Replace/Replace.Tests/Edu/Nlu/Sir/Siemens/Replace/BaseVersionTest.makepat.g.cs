// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Edu.Nlu.Sir.Siemens.Replace
{
    public partial class BaseVersionTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat381()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    i = this.makepat(cs, 0, ' ', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('\0', cs1[0]);
    Assert.AreEqual<char>('\0', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat510()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('\0', cs1[0]);
    Assert.AreEqual<char>('\0', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat583()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '\u0001';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('c', cs1[0]);
    Assert.AreEqual<char>('\u0001', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat498()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\0', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat930()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '\u0001';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\u0001', cs1[1]);
    Assert.AreEqual<char>('\u0001', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat995()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = ']';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(2, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\0', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat869()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '-';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\u0001', cs1[1]);
    Assert.AreEqual<char>('-', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat83()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '@';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('c', cs1[0]);
    Assert.AreEqual<char>('@', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat56()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '%';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('%', cs1[0]);
    Assert.AreEqual<char>('\0', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat538()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '^';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('!', cs1[0]);
    Assert.AreEqual<char>('\0', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat398()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '-';
    cs[2] = '\u0001';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\u0002', cs1[1]);
    Assert.AreEqual<char>('-', cs1[2]);
    Assert.AreEqual<char>('\u0001', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat165()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '@';
    cs[1] = '\u0001';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(2, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('c', cs1[0]);
    Assert.AreEqual<char>('\u0001', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat703()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '@';
    cs[1] = 't';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(2, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('c', cs1[0]);
    Assert.AreEqual<char>('\t', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat260()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '$';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('$', cs1[0]);
    Assert.AreEqual<char>('\0', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat301()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '@';
    cs[1] = 'n';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(2, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('c', cs1[0]);
    Assert.AreEqual<char>('\n', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat472()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '?';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('?', cs1[0]);
    Assert.AreEqual<char>('\0', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat840()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '*';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('c', cs1[0]);
    Assert.AreEqual<char>('*', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat297()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '$';
    i = this.makepat(cs, 0, '\u0001', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('c', cs1[0]);
    Assert.AreEqual<char>('$', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat688()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '-';
    cs[2] = '\u0001';
    cs[3] = '\u0001';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\u0003', cs1[1]);
    Assert.AreEqual<char>('-', cs1[2]);
    Assert.AreEqual<char>('\u0001', cs1[3]);
    Assert.AreEqual<char>('\u0001', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat899()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '-';
    cs[2] = '@';
    cs[3] = '\u0001';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\u0003', cs1[1]);
    Assert.AreEqual<char>('-', cs1[2]);
    Assert.AreEqual<char>('@', cs1[3]);
    Assert.AreEqual<char>('\u0001', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat142()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '-';
    cs[2] = '-';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\u0002', cs1[1]);
    Assert.AreEqual<char>('-', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat946()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[27] = '[';
    cs[28] = '-';
    cs[29] = '@';
    cs[30] = '\u4000';
    cs[31] = '@';
    cs[32] = '\u0001';
    i = this.makepat(cs, 27, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\u0005', cs1[1]);
    Assert.AreEqual<char>('-', cs1[2]);
    Assert.AreEqual<char>('@', cs1[3]);
    Assert.AreEqual<char>('\u4000', cs1[4]);
    Assert.AreEqual<char>('@', cs1[5]);
    Assert.AreEqual<char>('\u0001', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat937()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '-';
    cs[2] = '-';
    cs[3] = '\u0001';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\u0003', cs1[1]);
    Assert.AreEqual<char>('-', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('\u0001', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat908()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '$';
    cs[1] = '\u0001';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(2, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('c', cs1[0]);
    Assert.AreEqual<char>('$', cs1[1]);
    Assert.AreEqual<char>('c', cs1[2]);
    Assert.AreEqual<char>('\u0001', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat717()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = ']';
    cs[2] = '\u0001';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(3, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\0', cs1[1]);
    Assert.AreEqual<char>('c', cs1[2]);
    Assert.AreEqual<char>('\u0001', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat209()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '1';
    cs[2] = '-';
    cs[3] = '\u0001';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\u0003', cs1[1]);
    Assert.AreEqual<char>('1', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('\u0001', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat892()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '1';
    cs[2] = '-';
    cs[3] = '1';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\u0001', cs1[1]);
    Assert.AreEqual<char>('1', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat127()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '9';
    cs[2] = '-';
    cs[3] = 'x';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('@', cs1[1]);
    Assert.AreEqual<char>('9', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('-', cs1[4]);
    Assert.AreEqual<char>('-', cs1[5]);
    Assert.AreEqual<char>('-', cs1[6]);
    Assert.AreEqual<char>('-', cs1[7]);
    Assert.AreEqual<char>('-', cs1[8]);
    Assert.AreEqual<char>('-', cs1[9]);
    Assert.AreEqual<char>('-', cs1[10]);
    Assert.AreEqual<char>('-', cs1[11]);
    Assert.AreEqual<char>('-', cs1[12]);
    Assert.AreEqual<char>('-', cs1[13]);
    Assert.AreEqual<char>('-', cs1[14]);
    Assert.AreEqual<char>('-', cs1[15]);
    Assert.AreEqual<char>('-', cs1[16]);
    Assert.AreEqual<char>('-', cs1[17]);
    Assert.AreEqual<char>('-', cs1[18]);
    Assert.AreEqual<char>('-', cs1[19]);
    Assert.AreEqual<char>('-', cs1[20]);
    Assert.AreEqual<char>('-', cs1[21]);
    Assert.AreEqual<char>('-', cs1[22]);
    Assert.AreEqual<char>('-', cs1[23]);
    Assert.AreEqual<char>('-', cs1[24]);
    Assert.AreEqual<char>('-', cs1[25]);
    Assert.AreEqual<char>('-', cs1[26]);
    Assert.AreEqual<char>('-', cs1[27]);
    Assert.AreEqual<char>('-', cs1[28]);
    Assert.AreEqual<char>('-', cs1[29]);
    Assert.AreEqual<char>('-', cs1[30]);
    Assert.AreEqual<char>('-', cs1[31]);
    Assert.AreEqual<char>('-', cs1[32]);
    Assert.AreEqual<char>('-', cs1[33]);
    Assert.AreEqual<char>('-', cs1[34]);
    Assert.AreEqual<char>('-', cs1[35]);
    Assert.AreEqual<char>('-', cs1[36]);
    Assert.AreEqual<char>('-', cs1[37]);
    Assert.AreEqual<char>('-', cs1[38]);
    Assert.AreEqual<char>('-', cs1[39]);
    Assert.AreEqual<char>('-', cs1[40]);
    Assert.AreEqual<char>('-', cs1[41]);
    Assert.AreEqual<char>('-', cs1[42]);
    Assert.AreEqual<char>('-', cs1[43]);
    Assert.AreEqual<char>('-', cs1[44]);
    Assert.AreEqual<char>('-', cs1[45]);
    Assert.AreEqual<char>('-', cs1[46]);
    Assert.AreEqual<char>('-', cs1[47]);
    Assert.AreEqual<char>('-', cs1[48]);
    Assert.AreEqual<char>('-', cs1[49]);
    Assert.AreEqual<char>('-', cs1[50]);
    Assert.AreEqual<char>('-', cs1[51]);
    Assert.AreEqual<char>('-', cs1[52]);
    Assert.AreEqual<char>('-', cs1[53]);
    Assert.AreEqual<char>('-', cs1[54]);
    Assert.AreEqual<char>('-', cs1[55]);
    Assert.AreEqual<char>('-', cs1[56]);
    Assert.AreEqual<char>('-', cs1[57]);
    Assert.AreEqual<char>('-', cs1[58]);
    Assert.AreEqual<char>('-', cs1[59]);
    Assert.AreEqual<char>('-', cs1[60]);
    Assert.AreEqual<char>('-', cs1[61]);
    Assert.AreEqual<char>('-', cs1[62]);
    Assert.AreEqual<char>('-', cs1[63]);
    Assert.AreEqual<char>('-', cs1[64]);
    Assert.AreEqual<char>('-', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat123()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '1';
    cs[2] = '-';
    cs[3] = 'x';
    cs[4] = '-';
    cs[5] = '\u0001';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('J', cs1[1]);
    Assert.AreEqual<char>('1', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('-', cs1[4]);
    Assert.AreEqual<char>('-', cs1[5]);
    Assert.AreEqual<char>('-', cs1[6]);
    Assert.AreEqual<char>('-', cs1[7]);
    Assert.AreEqual<char>('-', cs1[8]);
    Assert.AreEqual<char>('-', cs1[9]);
    Assert.AreEqual<char>('-', cs1[10]);
    Assert.AreEqual<char>('-', cs1[11]);
    Assert.AreEqual<char>('-', cs1[12]);
    Assert.AreEqual<char>('-', cs1[13]);
    Assert.AreEqual<char>('-', cs1[14]);
    Assert.AreEqual<char>('-', cs1[15]);
    Assert.AreEqual<char>('-', cs1[16]);
    Assert.AreEqual<char>('-', cs1[17]);
    Assert.AreEqual<char>('-', cs1[18]);
    Assert.AreEqual<char>('-', cs1[19]);
    Assert.AreEqual<char>('-', cs1[20]);
    Assert.AreEqual<char>('-', cs1[21]);
    Assert.AreEqual<char>('-', cs1[22]);
    Assert.AreEqual<char>('-', cs1[23]);
    Assert.AreEqual<char>('-', cs1[24]);
    Assert.AreEqual<char>('-', cs1[25]);
    Assert.AreEqual<char>('-', cs1[26]);
    Assert.AreEqual<char>('-', cs1[27]);
    Assert.AreEqual<char>('-', cs1[28]);
    Assert.AreEqual<char>('-', cs1[29]);
    Assert.AreEqual<char>('-', cs1[30]);
    Assert.AreEqual<char>('-', cs1[31]);
    Assert.AreEqual<char>('-', cs1[32]);
    Assert.AreEqual<char>('-', cs1[33]);
    Assert.AreEqual<char>('-', cs1[34]);
    Assert.AreEqual<char>('-', cs1[35]);
    Assert.AreEqual<char>('-', cs1[36]);
    Assert.AreEqual<char>('-', cs1[37]);
    Assert.AreEqual<char>('-', cs1[38]);
    Assert.AreEqual<char>('-', cs1[39]);
    Assert.AreEqual<char>('-', cs1[40]);
    Assert.AreEqual<char>('-', cs1[41]);
    Assert.AreEqual<char>('-', cs1[42]);
    Assert.AreEqual<char>('-', cs1[43]);
    Assert.AreEqual<char>('-', cs1[44]);
    Assert.AreEqual<char>('-', cs1[45]);
    Assert.AreEqual<char>('-', cs1[46]);
    Assert.AreEqual<char>('-', cs1[47]);
    Assert.AreEqual<char>('-', cs1[48]);
    Assert.AreEqual<char>('-', cs1[49]);
    Assert.AreEqual<char>('-', cs1[50]);
    Assert.AreEqual<char>('-', cs1[51]);
    Assert.AreEqual<char>('-', cs1[52]);
    Assert.AreEqual<char>('-', cs1[53]);
    Assert.AreEqual<char>('-', cs1[54]);
    Assert.AreEqual<char>('-', cs1[55]);
    Assert.AreEqual<char>('-', cs1[56]);
    Assert.AreEqual<char>('-', cs1[57]);
    Assert.AreEqual<char>('-', cs1[58]);
    Assert.AreEqual<char>('-', cs1[59]);
    Assert.AreEqual<char>('-', cs1[60]);
    Assert.AreEqual<char>('-', cs1[61]);
    Assert.AreEqual<char>('-', cs1[62]);
    Assert.AreEqual<char>('-', cs1[63]);
    Assert.AreEqual<char>('-', cs1[64]);
    Assert.AreEqual<char>('-', cs1[65]);
    Assert.AreEqual<char>('-', cs1[66]);
    Assert.AreEqual<char>('-', cs1[67]);
    Assert.AreEqual<char>('-', cs1[68]);
    Assert.AreEqual<char>('-', cs1[69]);
    Assert.AreEqual<char>('-', cs1[70]);
    Assert.AreEqual<char>('-', cs1[71]);
    Assert.AreEqual<char>('-', cs1[72]);
    Assert.AreEqual<char>('-', cs1[73]);
    Assert.AreEqual<char>('-', cs1[74]);
    Assert.AreEqual<char>('\u0001', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat950()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[48] = '[';
    cs[49] = '2';
    cs[50] = '-';
    cs[51] = 'y';
    cs[52] = '\u0001';
    cs[53] = '\u0001';
    cs[54] = '\u0001';
    cs[55] = '\u0001';
    cs[56] = '\u0001';
    cs[57] = '\u0001';
    cs[58] = '\u0001';
    cs[59] = '\u0001';
    cs[60] = '\u0001';
    cs[61] = '\u0001';
    cs[62] = '\u0200';
    cs[63] = '\u0001';
    cs[64] = '\u0001';
    cs[65] = '\u0100';
    cs[66] = '\u0001';
    cs[67] = '\u0001';
    cs[68] = '\u0001';
    cs[69] = '\u0001';
    cs[70] = '\u0001';
    cs[71] = '\u0001';
    cs[72] = '@';
    cs[73] = '\u0004';
    cs[74] = '\u0001';
    cs[75] = '\u0001';
    cs[76] = '\u0001';
    cs[77] = '\b';
    i = this.makepat(cs, 48, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('b', cs1[1]);
    Assert.AreEqual<char>('2', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('-', cs1[4]);
    Assert.AreEqual<char>('-', cs1[5]);
    Assert.AreEqual<char>('-', cs1[6]);
    Assert.AreEqual<char>('-', cs1[7]);
    Assert.AreEqual<char>('-', cs1[8]);
    Assert.AreEqual<char>('-', cs1[9]);
    Assert.AreEqual<char>('-', cs1[10]);
    Assert.AreEqual<char>('-', cs1[11]);
    Assert.AreEqual<char>('-', cs1[12]);
    Assert.AreEqual<char>('-', cs1[13]);
    Assert.AreEqual<char>('-', cs1[14]);
    Assert.AreEqual<char>('-', cs1[15]);
    Assert.AreEqual<char>('-', cs1[16]);
    Assert.AreEqual<char>('-', cs1[17]);
    Assert.AreEqual<char>('-', cs1[18]);
    Assert.AreEqual<char>('-', cs1[19]);
    Assert.AreEqual<char>('-', cs1[20]);
    Assert.AreEqual<char>('-', cs1[21]);
    Assert.AreEqual<char>('-', cs1[22]);
    Assert.AreEqual<char>('-', cs1[23]);
    Assert.AreEqual<char>('-', cs1[24]);
    Assert.AreEqual<char>('-', cs1[25]);
    Assert.AreEqual<char>('-', cs1[26]);
    Assert.AreEqual<char>('-', cs1[27]);
    Assert.AreEqual<char>('-', cs1[28]);
    Assert.AreEqual<char>('-', cs1[29]);
    Assert.AreEqual<char>('-', cs1[30]);
    Assert.AreEqual<char>('-', cs1[31]);
    Assert.AreEqual<char>('-', cs1[32]);
    Assert.AreEqual<char>('-', cs1[33]);
    Assert.AreEqual<char>('-', cs1[34]);
    Assert.AreEqual<char>('-', cs1[35]);
    Assert.AreEqual<char>('-', cs1[36]);
    Assert.AreEqual<char>('-', cs1[37]);
    Assert.AreEqual<char>('-', cs1[38]);
    Assert.AreEqual<char>('-', cs1[39]);
    Assert.AreEqual<char>('-', cs1[40]);
    Assert.AreEqual<char>('-', cs1[41]);
    Assert.AreEqual<char>('-', cs1[42]);
    Assert.AreEqual<char>('-', cs1[43]);
    Assert.AreEqual<char>('-', cs1[44]);
    Assert.AreEqual<char>('-', cs1[45]);
    Assert.AreEqual<char>('-', cs1[46]);
    Assert.AreEqual<char>('-', cs1[47]);
    Assert.AreEqual<char>('-', cs1[48]);
    Assert.AreEqual<char>('-', cs1[49]);
    Assert.AreEqual<char>('-', cs1[50]);
    Assert.AreEqual<char>('-', cs1[51]);
    Assert.AreEqual<char>('-', cs1[52]);
    Assert.AreEqual<char>('-', cs1[53]);
    Assert.AreEqual<char>('-', cs1[54]);
    Assert.AreEqual<char>('-', cs1[55]);
    Assert.AreEqual<char>('-', cs1[56]);
    Assert.AreEqual<char>('-', cs1[57]);
    Assert.AreEqual<char>('-', cs1[58]);
    Assert.AreEqual<char>('-', cs1[59]);
    Assert.AreEqual<char>('-', cs1[60]);
    Assert.AreEqual<char>('-', cs1[61]);
    Assert.AreEqual<char>('-', cs1[62]);
    Assert.AreEqual<char>('-', cs1[63]);
    Assert.AreEqual<char>('-', cs1[64]);
    Assert.AreEqual<char>('-', cs1[65]);
    Assert.AreEqual<char>('-', cs1[66]);
    Assert.AreEqual<char>('-', cs1[67]);
    Assert.AreEqual<char>('-', cs1[68]);
    Assert.AreEqual<char>('-', cs1[69]);
    Assert.AreEqual<char>('-', cs1[70]);
    Assert.AreEqual<char>('-', cs1[71]);
    Assert.AreEqual<char>('-', cs1[72]);
    Assert.AreEqual<char>('-', cs1[73]);
    Assert.AreEqual<char>('\u0001', cs1[74]);
    Assert.AreEqual<char>('\u0001', cs1[75]);
    Assert.AreEqual<char>('\u0001', cs1[76]);
    Assert.AreEqual<char>('\u0001', cs1[77]);
    Assert.AreEqual<char>('\u0001', cs1[78]);
    Assert.AreEqual<char>('\u0001', cs1[79]);
    Assert.AreEqual<char>('\u0001', cs1[80]);
    Assert.AreEqual<char>('\u0001', cs1[81]);
    Assert.AreEqual<char>('\u0001', cs1[82]);
    Assert.AreEqual<char>('\u0001', cs1[83]);
    Assert.AreEqual<char>('\u0200', cs1[84]);
    Assert.AreEqual<char>('\u0001', cs1[85]);
    Assert.AreEqual<char>('\u0001', cs1[86]);
    Assert.AreEqual<char>('\u0100', cs1[87]);
    Assert.AreEqual<char>('\u0001', cs1[88]);
    Assert.AreEqual<char>('\u0001', cs1[89]);
    Assert.AreEqual<char>('\u0001', cs1[90]);
    Assert.AreEqual<char>('\u0001', cs1[91]);
    Assert.AreEqual<char>('\u0001', cs1[92]);
    Assert.AreEqual<char>('\u0001', cs1[93]);
    Assert.AreEqual<char>('@', cs1[94]);
    Assert.AreEqual<char>('\u0004', cs1[95]);
    Assert.AreEqual<char>('\u0001', cs1[96]);
    Assert.AreEqual<char>('\u0001', cs1[97]);
    Assert.AreEqual<char>('\u0001', cs1[98]);
    Assert.AreEqual<char>('\b', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat53802()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[4] = '[';
    cs[5] = '0';
    cs[6] = '-';
    cs[7] = 'w';
    cs[8] = '\u0001';
    cs[9] = '\u0001';
    cs[10] = '\u0001';
    cs[11] = '\b';
    cs[12] = '\u0001';
    cs[13] = '\u0001';
    cs[14] = '\u0001';
    cs[15] = '\u0001';
    cs[16] = '\u0001';
    cs[17] = '\u0001';
    cs[18] = '\u0001';
    cs[19] = '\u0001';
    cs[20] = '\u0001';
    cs[21] = '\u0001';
    cs[22] = '\u0001';
    cs[23] = '\u0001';
    cs[24] = '\u0001';
    cs[25] = '\u0001';
    cs[26] = '\u0001';
    cs[27] = '\u0001';
    cs[28] = '@';
    cs[29] = '\u0001';
    cs[30] = '\u0001';
    cs[31] = '\u0001';
    cs[32] = '\u0001';
    cs[33] = '\u0001';
    cs[34] = '\u8000';
    i = this.makepat(cs, 4, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('b', cs1[1]);
    Assert.AreEqual<char>('0', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('-', cs1[4]);
    Assert.AreEqual<char>('-', cs1[5]);
    Assert.AreEqual<char>('-', cs1[6]);
    Assert.AreEqual<char>('-', cs1[7]);
    Assert.AreEqual<char>('-', cs1[8]);
    Assert.AreEqual<char>('-', cs1[9]);
    Assert.AreEqual<char>('-', cs1[10]);
    Assert.AreEqual<char>('-', cs1[11]);
    Assert.AreEqual<char>('-', cs1[12]);
    Assert.AreEqual<char>('-', cs1[13]);
    Assert.AreEqual<char>('-', cs1[14]);
    Assert.AreEqual<char>('-', cs1[15]);
    Assert.AreEqual<char>('-', cs1[16]);
    Assert.AreEqual<char>('-', cs1[17]);
    Assert.AreEqual<char>('-', cs1[18]);
    Assert.AreEqual<char>('-', cs1[19]);
    Assert.AreEqual<char>('-', cs1[20]);
    Assert.AreEqual<char>('-', cs1[21]);
    Assert.AreEqual<char>('-', cs1[22]);
    Assert.AreEqual<char>('-', cs1[23]);
    Assert.AreEqual<char>('-', cs1[24]);
    Assert.AreEqual<char>('-', cs1[25]);
    Assert.AreEqual<char>('-', cs1[26]);
    Assert.AreEqual<char>('-', cs1[27]);
    Assert.AreEqual<char>('-', cs1[28]);
    Assert.AreEqual<char>('-', cs1[29]);
    Assert.AreEqual<char>('-', cs1[30]);
    Assert.AreEqual<char>('-', cs1[31]);
    Assert.AreEqual<char>('-', cs1[32]);
    Assert.AreEqual<char>('-', cs1[33]);
    Assert.AreEqual<char>('-', cs1[34]);
    Assert.AreEqual<char>('-', cs1[35]);
    Assert.AreEqual<char>('-', cs1[36]);
    Assert.AreEqual<char>('-', cs1[37]);
    Assert.AreEqual<char>('-', cs1[38]);
    Assert.AreEqual<char>('-', cs1[39]);
    Assert.AreEqual<char>('-', cs1[40]);
    Assert.AreEqual<char>('-', cs1[41]);
    Assert.AreEqual<char>('-', cs1[42]);
    Assert.AreEqual<char>('-', cs1[43]);
    Assert.AreEqual<char>('-', cs1[44]);
    Assert.AreEqual<char>('-', cs1[45]);
    Assert.AreEqual<char>('-', cs1[46]);
    Assert.AreEqual<char>('-', cs1[47]);
    Assert.AreEqual<char>('-', cs1[48]);
    Assert.AreEqual<char>('-', cs1[49]);
    Assert.AreEqual<char>('-', cs1[50]);
    Assert.AreEqual<char>('-', cs1[51]);
    Assert.AreEqual<char>('-', cs1[52]);
    Assert.AreEqual<char>('-', cs1[53]);
    Assert.AreEqual<char>('-', cs1[54]);
    Assert.AreEqual<char>('-', cs1[55]);
    Assert.AreEqual<char>('-', cs1[56]);
    Assert.AreEqual<char>('-', cs1[57]);
    Assert.AreEqual<char>('-', cs1[58]);
    Assert.AreEqual<char>('-', cs1[59]);
    Assert.AreEqual<char>('-', cs1[60]);
    Assert.AreEqual<char>('-', cs1[61]);
    Assert.AreEqual<char>('-', cs1[62]);
    Assert.AreEqual<char>('-', cs1[63]);
    Assert.AreEqual<char>('-', cs1[64]);
    Assert.AreEqual<char>('-', cs1[65]);
    Assert.AreEqual<char>('-', cs1[66]);
    Assert.AreEqual<char>('-', cs1[67]);
    Assert.AreEqual<char>('-', cs1[68]);
    Assert.AreEqual<char>('-', cs1[69]);
    Assert.AreEqual<char>('-', cs1[70]);
    Assert.AreEqual<char>('-', cs1[71]);
    Assert.AreEqual<char>('-', cs1[72]);
    Assert.AreEqual<char>('-', cs1[73]);
    Assert.AreEqual<char>('\u0001', cs1[74]);
    Assert.AreEqual<char>('\u0001', cs1[75]);
    Assert.AreEqual<char>('\u0001', cs1[76]);
    Assert.AreEqual<char>('\b', cs1[77]);
    Assert.AreEqual<char>('\u0001', cs1[78]);
    Assert.AreEqual<char>('\u0001', cs1[79]);
    Assert.AreEqual<char>('\u0001', cs1[80]);
    Assert.AreEqual<char>('\u0001', cs1[81]);
    Assert.AreEqual<char>('\u0001', cs1[82]);
    Assert.AreEqual<char>('\u0001', cs1[83]);
    Assert.AreEqual<char>('\u0001', cs1[84]);
    Assert.AreEqual<char>('\u0001', cs1[85]);
    Assert.AreEqual<char>('\u0001', cs1[86]);
    Assert.AreEqual<char>('\u0001', cs1[87]);
    Assert.AreEqual<char>('\u0001', cs1[88]);
    Assert.AreEqual<char>('\u0001', cs1[89]);
    Assert.AreEqual<char>('\u0001', cs1[90]);
    Assert.AreEqual<char>('\u0001', cs1[91]);
    Assert.AreEqual<char>('\u0001', cs1[92]);
    Assert.AreEqual<char>('\u0001', cs1[93]);
    Assert.AreEqual<char>('@', cs1[94]);
    Assert.AreEqual<char>('\u0001', cs1[95]);
    Assert.AreEqual<char>('\u0001', cs1[96]);
    Assert.AreEqual<char>('\u0001', cs1[97]);
    Assert.AreEqual<char>('\u0001', cs1[98]);
    Assert.AreEqual<char>('\u0001', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat961()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[27] = '[';
    cs[28] = '-';
    cs[29] = '@';
    cs[30] = '\u4000';
    cs[31] = '@';
    cs[32] = '\u0001';
    cs[33] = ']';
    cs[34] = '*';
    i = this.makepat(cs, 27, '\0', out cs1);
    Assert.AreEqual<int>(35, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('*', cs1[0]);
    Assert.AreEqual<char>('[', cs1[1]);
    Assert.AreEqual<char>('\u0005', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('@', cs1[4]);
    Assert.AreEqual<char>('\u4000', cs1[5]);
    Assert.AreEqual<char>('@', cs1[6]);
    Assert.AreEqual<char>('\u0001', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat818()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[27] = '[';
    cs[28] = '-';
    cs[29] = '@';
    cs[30] = '\u4000';
    cs[31] = '@';
    cs[32] = '\u0001';
    cs[33] = ']';
    cs[34] = '[';
    i = this.makepat(cs, 27, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('\u0005', cs1[1]);
    Assert.AreEqual<char>('-', cs1[2]);
    Assert.AreEqual<char>('@', cs1[3]);
    Assert.AreEqual<char>('\u4000', cs1[4]);
    Assert.AreEqual<char>('@', cs1[5]);
    Assert.AreEqual<char>('\u0001', cs1[6]);
    Assert.AreEqual<char>('[', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat652()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[28] = '[';
    cs[29] = '0';
    cs[30] = '-';
    cs[31] = 'w';
    cs[32] = '-';
    cs[33] = '1';
    i = this.makepat(cs, 28, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('J', cs1[1]);
    Assert.AreEqual<char>('0', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('-', cs1[4]);
    Assert.AreEqual<char>('-', cs1[5]);
    Assert.AreEqual<char>('-', cs1[6]);
    Assert.AreEqual<char>('-', cs1[7]);
    Assert.AreEqual<char>('-', cs1[8]);
    Assert.AreEqual<char>('-', cs1[9]);
    Assert.AreEqual<char>('-', cs1[10]);
    Assert.AreEqual<char>('-', cs1[11]);
    Assert.AreEqual<char>('-', cs1[12]);
    Assert.AreEqual<char>('-', cs1[13]);
    Assert.AreEqual<char>('-', cs1[14]);
    Assert.AreEqual<char>('-', cs1[15]);
    Assert.AreEqual<char>('-', cs1[16]);
    Assert.AreEqual<char>('-', cs1[17]);
    Assert.AreEqual<char>('-', cs1[18]);
    Assert.AreEqual<char>('-', cs1[19]);
    Assert.AreEqual<char>('-', cs1[20]);
    Assert.AreEqual<char>('-', cs1[21]);
    Assert.AreEqual<char>('-', cs1[22]);
    Assert.AreEqual<char>('-', cs1[23]);
    Assert.AreEqual<char>('-', cs1[24]);
    Assert.AreEqual<char>('-', cs1[25]);
    Assert.AreEqual<char>('-', cs1[26]);
    Assert.AreEqual<char>('-', cs1[27]);
    Assert.AreEqual<char>('-', cs1[28]);
    Assert.AreEqual<char>('-', cs1[29]);
    Assert.AreEqual<char>('-', cs1[30]);
    Assert.AreEqual<char>('-', cs1[31]);
    Assert.AreEqual<char>('-', cs1[32]);
    Assert.AreEqual<char>('-', cs1[33]);
    Assert.AreEqual<char>('-', cs1[34]);
    Assert.AreEqual<char>('-', cs1[35]);
    Assert.AreEqual<char>('-', cs1[36]);
    Assert.AreEqual<char>('-', cs1[37]);
    Assert.AreEqual<char>('-', cs1[38]);
    Assert.AreEqual<char>('-', cs1[39]);
    Assert.AreEqual<char>('-', cs1[40]);
    Assert.AreEqual<char>('-', cs1[41]);
    Assert.AreEqual<char>('-', cs1[42]);
    Assert.AreEqual<char>('-', cs1[43]);
    Assert.AreEqual<char>('-', cs1[44]);
    Assert.AreEqual<char>('-', cs1[45]);
    Assert.AreEqual<char>('-', cs1[46]);
    Assert.AreEqual<char>('-', cs1[47]);
    Assert.AreEqual<char>('-', cs1[48]);
    Assert.AreEqual<char>('-', cs1[49]);
    Assert.AreEqual<char>('-', cs1[50]);
    Assert.AreEqual<char>('-', cs1[51]);
    Assert.AreEqual<char>('-', cs1[52]);
    Assert.AreEqual<char>('-', cs1[53]);
    Assert.AreEqual<char>('-', cs1[54]);
    Assert.AreEqual<char>('-', cs1[55]);
    Assert.AreEqual<char>('-', cs1[56]);
    Assert.AreEqual<char>('-', cs1[57]);
    Assert.AreEqual<char>('-', cs1[58]);
    Assert.AreEqual<char>('-', cs1[59]);
    Assert.AreEqual<char>('-', cs1[60]);
    Assert.AreEqual<char>('-', cs1[61]);
    Assert.AreEqual<char>('-', cs1[62]);
    Assert.AreEqual<char>('-', cs1[63]);
    Assert.AreEqual<char>('-', cs1[64]);
    Assert.AreEqual<char>('-', cs1[65]);
    Assert.AreEqual<char>('-', cs1[66]);
    Assert.AreEqual<char>('-', cs1[67]);
    Assert.AreEqual<char>('-', cs1[68]);
    Assert.AreEqual<char>('-', cs1[69]);
    Assert.AreEqual<char>('-', cs1[70]);
    Assert.AreEqual<char>('-', cs1[71]);
    Assert.AreEqual<char>('-', cs1[72]);
    Assert.AreEqual<char>('-', cs1[73]);
    Assert.AreEqual<char>('-', cs1[74]);
    Assert.AreEqual<char>('1', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat222()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '3';
    cs[2] = '-';
    cs[3] = 'z';
    cs[4] = '1';
    cs[5] = '-';
    cs[6] = '1';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('[', cs1[0]);
    Assert.AreEqual<char>('I', cs1[1]);
    Assert.AreEqual<char>('3', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('-', cs1[4]);
    Assert.AreEqual<char>('-', cs1[5]);
    Assert.AreEqual<char>('-', cs1[6]);
    Assert.AreEqual<char>('-', cs1[7]);
    Assert.AreEqual<char>('-', cs1[8]);
    Assert.AreEqual<char>('-', cs1[9]);
    Assert.AreEqual<char>('-', cs1[10]);
    Assert.AreEqual<char>('-', cs1[11]);
    Assert.AreEqual<char>('-', cs1[12]);
    Assert.AreEqual<char>('-', cs1[13]);
    Assert.AreEqual<char>('-', cs1[14]);
    Assert.AreEqual<char>('-', cs1[15]);
    Assert.AreEqual<char>('-', cs1[16]);
    Assert.AreEqual<char>('-', cs1[17]);
    Assert.AreEqual<char>('-', cs1[18]);
    Assert.AreEqual<char>('-', cs1[19]);
    Assert.AreEqual<char>('-', cs1[20]);
    Assert.AreEqual<char>('-', cs1[21]);
    Assert.AreEqual<char>('-', cs1[22]);
    Assert.AreEqual<char>('-', cs1[23]);
    Assert.AreEqual<char>('-', cs1[24]);
    Assert.AreEqual<char>('-', cs1[25]);
    Assert.AreEqual<char>('-', cs1[26]);
    Assert.AreEqual<char>('-', cs1[27]);
    Assert.AreEqual<char>('-', cs1[28]);
    Assert.AreEqual<char>('-', cs1[29]);
    Assert.AreEqual<char>('-', cs1[30]);
    Assert.AreEqual<char>('-', cs1[31]);
    Assert.AreEqual<char>('-', cs1[32]);
    Assert.AreEqual<char>('-', cs1[33]);
    Assert.AreEqual<char>('-', cs1[34]);
    Assert.AreEqual<char>('-', cs1[35]);
    Assert.AreEqual<char>('-', cs1[36]);
    Assert.AreEqual<char>('-', cs1[37]);
    Assert.AreEqual<char>('-', cs1[38]);
    Assert.AreEqual<char>('-', cs1[39]);
    Assert.AreEqual<char>('-', cs1[40]);
    Assert.AreEqual<char>('-', cs1[41]);
    Assert.AreEqual<char>('-', cs1[42]);
    Assert.AreEqual<char>('-', cs1[43]);
    Assert.AreEqual<char>('-', cs1[44]);
    Assert.AreEqual<char>('-', cs1[45]);
    Assert.AreEqual<char>('-', cs1[46]);
    Assert.AreEqual<char>('-', cs1[47]);
    Assert.AreEqual<char>('-', cs1[48]);
    Assert.AreEqual<char>('-', cs1[49]);
    Assert.AreEqual<char>('-', cs1[50]);
    Assert.AreEqual<char>('-', cs1[51]);
    Assert.AreEqual<char>('-', cs1[52]);
    Assert.AreEqual<char>('-', cs1[53]);
    Assert.AreEqual<char>('-', cs1[54]);
    Assert.AreEqual<char>('-', cs1[55]);
    Assert.AreEqual<char>('-', cs1[56]);
    Assert.AreEqual<char>('-', cs1[57]);
    Assert.AreEqual<char>('-', cs1[58]);
    Assert.AreEqual<char>('-', cs1[59]);
    Assert.AreEqual<char>('-', cs1[60]);
    Assert.AreEqual<char>('-', cs1[61]);
    Assert.AreEqual<char>('-', cs1[62]);
    Assert.AreEqual<char>('-', cs1[63]);
    Assert.AreEqual<char>('-', cs1[64]);
    Assert.AreEqual<char>('-', cs1[65]);
    Assert.AreEqual<char>('-', cs1[66]);
    Assert.AreEqual<char>('-', cs1[67]);
    Assert.AreEqual<char>('-', cs1[68]);
    Assert.AreEqual<char>('-', cs1[69]);
    Assert.AreEqual<char>('-', cs1[70]);
    Assert.AreEqual<char>('-', cs1[71]);
    Assert.AreEqual<char>('-', cs1[72]);
    Assert.AreEqual<char>('-', cs1[73]);
    Assert.AreEqual<char>('1', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat411()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[56] = '[';
    cs[57] = '-';
    cs[58] = '@';
    cs[59] = '\u0001';
    cs[60] = '@';
    cs[61] = '\u0001';
    cs[62] = ']';
    cs[63] = '*';
    cs[64] = '*';
    i = this.makepat(cs, 56, '\0', out cs1);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('*', cs1[0]);
    Assert.AreEqual<char>('[', cs1[1]);
    Assert.AreEqual<char>('\u0005', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('@', cs1[4]);
    Assert.AreEqual<char>('\u0001', cs1[5]);
    Assert.AreEqual<char>('@', cs1[6]);
    Assert.AreEqual<char>('\u0001', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat10()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '[';
    cs[1] = '-';
    cs[2] = '@';
    cs[3] = '\u0001';
    cs[4] = '@';
    cs[5] = '\u0001';
    cs[6] = ']';
    cs[7] = '*';
    cs[8] = '\u0001';
    cs[9] = '*';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(10, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('*', cs1[0]);
    Assert.AreEqual<char>('[', cs1[1]);
    Assert.AreEqual<char>('\u0005', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('@', cs1[4]);
    Assert.AreEqual<char>('\u0001', cs1[5]);
    Assert.AreEqual<char>('@', cs1[6]);
    Assert.AreEqual<char>('\u0001', cs1[7]);
    Assert.AreEqual<char>('*', cs1[8]);
    Assert.AreEqual<char>('c', cs1[9]);
    Assert.AreEqual<char>('\u0001', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat868()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[56] = '[';
    cs[57] = '-';
    cs[58] = '@';
    cs[59] = '\u0001';
    cs[60] = '@';
    cs[61] = '\u0001';
    cs[62] = ']';
    cs[63] = '*';
    cs[64] = '@';
    cs[65] = 'n';
    cs[66] = '@';
    i = this.makepat(cs, 56, '\0', out cs1);
    Assert.AreEqual<int>(67, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('*', cs1[0]);
    Assert.AreEqual<char>('[', cs1[1]);
    Assert.AreEqual<char>('\u0005', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('@', cs1[4]);
    Assert.AreEqual<char>('\u0001', cs1[5]);
    Assert.AreEqual<char>('@', cs1[6]);
    Assert.AreEqual<char>('\u0001', cs1[7]);
    Assert.AreEqual<char>('c', cs1[8]);
    Assert.AreEqual<char>('\n', cs1[9]);
    Assert.AreEqual<char>('c', cs1[10]);
    Assert.AreEqual<char>('@', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat266()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[56] = '[';
    cs[57] = '-';
    cs[58] = '@';
    cs[59] = '\u0001';
    cs[60] = '@';
    cs[61] = '\u0001';
    cs[62] = ']';
    cs[63] = '*';
    cs[64] = '@';
    cs[65] = 'n';
    cs[66] = '@';
    cs[67] = '\u0001';
    i = this.makepat(cs, 56, '\0', out cs1);
    Assert.AreEqual<int>(68, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('*', cs1[0]);
    Assert.AreEqual<char>('[', cs1[1]);
    Assert.AreEqual<char>('\u0005', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('@', cs1[4]);
    Assert.AreEqual<char>('\u0001', cs1[5]);
    Assert.AreEqual<char>('@', cs1[6]);
    Assert.AreEqual<char>('\u0001', cs1[7]);
    Assert.AreEqual<char>('c', cs1[8]);
    Assert.AreEqual<char>('\n', cs1[9]);
    Assert.AreEqual<char>('c', cs1[10]);
    Assert.AreEqual<char>('\u0001', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat576()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[56] = '[';
    cs[57] = '-';
    cs[58] = '@';
    cs[59] = '\u0001';
    cs[60] = '@';
    cs[61] = '\u0001';
    cs[62] = ']';
    cs[63] = '*';
    cs[64] = '@';
    cs[65] = 't';
    cs[66] = '@';
    cs[67] = '\u0001';
    i = this.makepat(cs, 56, '\0', out cs1);
    Assert.AreEqual<int>(68, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('*', cs1[0]);
    Assert.AreEqual<char>('[', cs1[1]);
    Assert.AreEqual<char>('\u0005', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('@', cs1[4]);
    Assert.AreEqual<char>('\u0001', cs1[5]);
    Assert.AreEqual<char>('@', cs1[6]);
    Assert.AreEqual<char>('\u0001', cs1[7]);
    Assert.AreEqual<char>('c', cs1[8]);
    Assert.AreEqual<char>('\t', cs1[9]);
    Assert.AreEqual<char>('c', cs1[10]);
    Assert.AreEqual<char>('\u0001', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat238()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[56] = '[';
    cs[57] = '-';
    cs[58] = '@';
    cs[59] = '\u0001';
    cs[60] = '@';
    cs[61] = '\u0001';
    cs[62] = ']';
    cs[63] = '*';
    cs[64] = '$';
    cs[65] = '$';
    i = this.makepat(cs, 56, '\0', out cs1);
    Assert.AreEqual<int>(66, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('*', cs1[0]);
    Assert.AreEqual<char>('[', cs1[1]);
    Assert.AreEqual<char>('\u0005', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('@', cs1[4]);
    Assert.AreEqual<char>('\u0001', cs1[5]);
    Assert.AreEqual<char>('@', cs1[6]);
    Assert.AreEqual<char>('\u0001', cs1[7]);
    Assert.AreEqual<char>('c', cs1[8]);
    Assert.AreEqual<char>('$', cs1[9]);
    Assert.AreEqual<char>('$', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat343()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[56] = '[';
    cs[57] = '-';
    cs[58] = '@';
    cs[59] = '\u0001';
    cs[60] = '@';
    cs[61] = '\u0001';
    cs[62] = ']';
    cs[63] = '*';
    cs[64] = '@';
    cs[65] = 't';
    cs[66] = '@';
    cs[67] = 't';
    i = this.makepat(cs, 56, '\0', out cs1);
    Assert.AreEqual<int>(68, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('*', cs1[0]);
    Assert.AreEqual<char>('[', cs1[1]);
    Assert.AreEqual<char>('\u0005', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('@', cs1[4]);
    Assert.AreEqual<char>('\u0001', cs1[5]);
    Assert.AreEqual<char>('@', cs1[6]);
    Assert.AreEqual<char>('\u0001', cs1[7]);
    Assert.AreEqual<char>('c', cs1[8]);
    Assert.AreEqual<char>('\t', cs1[9]);
    Assert.AreEqual<char>('c', cs1[10]);
    Assert.AreEqual<char>('\t', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat424()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[56] = '[';
    cs[57] = '-';
    cs[58] = '@';
    cs[59] = '\u0001';
    cs[60] = '@';
    cs[61] = '\u0001';
    cs[62] = ']';
    cs[63] = '*';
    cs[64] = '@';
    cs[65] = 'n';
    cs[66] = '@';
    cs[67] = 'n';
    i = this.makepat(cs, 56, '\0', out cs1);
    Assert.AreEqual<int>(68, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('*', cs1[0]);
    Assert.AreEqual<char>('[', cs1[1]);
    Assert.AreEqual<char>('\u0005', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('@', cs1[4]);
    Assert.AreEqual<char>('\u0001', cs1[5]);
    Assert.AreEqual<char>('@', cs1[6]);
    Assert.AreEqual<char>('\u0001', cs1[7]);
    Assert.AreEqual<char>('c', cs1[8]);
    Assert.AreEqual<char>('\n', cs1[9]);
    Assert.AreEqual<char>('c', cs1[10]);
    Assert.AreEqual<char>('\n', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat168()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[64] = '[';
    cs[65] = '-';
    cs[66] = '@';
    cs[67] = '\u0001';
    cs[68] = '@';
    cs[69] = '\u0001';
    cs[70] = ']';
    cs[71] = '*';
    cs[72] = '[';
    cs[73] = '^';
    cs[74] = ']';
    i = this.makepat(cs, 64, '\0', out cs1);
    Assert.AreEqual<int>(75, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('*', cs1[0]);
    Assert.AreEqual<char>('[', cs1[1]);
    Assert.AreEqual<char>('\u0005', cs1[2]);
    Assert.AreEqual<char>('-', cs1[3]);
    Assert.AreEqual<char>('@', cs1[4]);
    Assert.AreEqual<char>('\u0001', cs1[5]);
    Assert.AreEqual<char>('@', cs1[6]);
    Assert.AreEqual<char>('\u0001', cs1[7]);
    Assert.AreEqual<char>('!', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makepat524()
{
    int i;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '%';
    cs[1] = '%';
    i = this.makepat(cs, 0, '\0', out cs1);
    Assert.AreEqual<int>(2, i);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('%', cs1[0]);
    Assert.AreEqual<char>('c', cs1[1]);
    Assert.AreEqual<char>('%', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
    }
}
