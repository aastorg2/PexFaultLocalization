// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Framework.Generated;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Edu.Unl.Sir.Siemens.PrintTokens
{
    public partial class OriginalTest
    {
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void numeric_case460()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[3];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[3];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[3];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[3];
      token1 = this.numeric_case(s0, token, (byte)0, bs3, 1);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(3, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<int>(18, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void numeric_case111()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[3];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[3];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[3];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[3];
      token1 = this.numeric_case(s0, token, (byte)49, bs3, 1);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(3, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void numeric_case95()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[3];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[80];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[3];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[3];
      token1 = this.numeric_case(s0, token, (byte)49, bs3, 1);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(3, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void numeric_case586()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[3];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[3];
      bs1[1] = (byte)1;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[3];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[3];
      token1 = this.numeric_case(s0, token, (byte)49, bs3, 1);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(3, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void numeric_case479()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[122];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[122];
      bs1[0] = (byte)10;
      bs1[120] = (byte)1;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 120;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[122];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token1 = this.numeric_case(s0, token, (byte)49, bs1, 1);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(122, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)1, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[4]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[5]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[6]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[8]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[33]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[34]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[35]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[36]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[37]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[38]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[39]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[40]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[41]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[42]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[43]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[44]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[45]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[46]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[47]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[48]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[49]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[50]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[51]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[52]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[53]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[54]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[55]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[56]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[57]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[58]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[59]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[60]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[61]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[62]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[63]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[64]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[65]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[66]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[67]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[68]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[69]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[70]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[71]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[72]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[73]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[74]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[75]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[76]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[77]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[78]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[79]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[80]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[81]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[82]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[83]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[84]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[85]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[86]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[87]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[88]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[89]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[90]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[91]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[92]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[93]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[94]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[95]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[96]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[97]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[98]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[99]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[100]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[101]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[102]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[103]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[104]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[105]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[106]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[107]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[108]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[109]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[110]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[111]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[112]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[113]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[114]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[115]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[116]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[117]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[118]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[119]);
      Assert.AreEqual<byte>((byte)1, token1.token_string[120]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[121]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void numeric_caseThrowsIndexOutOfRangeException651()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[0];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[80];
      bs1[0] = (byte)49;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 3;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[3];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[3];
      token1 = this.numeric_case(s0, token, (byte)49, bs3, 1);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void numeric_case948()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[64];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[80];
      bs1[2] = (byte)66;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 2;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[34];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[33];
      bs3[0] = (byte)9;
      token1 = this.numeric_case(s0, token, (byte)113, bs3, 1);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(34, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)66, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[4]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[5]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[6]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[8]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[33]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void numeric_case20()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[124];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[96];
      bs1[0] = (byte)48;
      bs1[1] = (byte)48;
      bs1[2] = (byte)48;
      bs1[3] = (byte)48;
      bs1[4] = (byte)48;
      bs1[5] = (byte)48;
      bs1[6] = (byte)48;
      bs1[7] = (byte)48;
      bs1[8] = (byte)48;
      bs1[9] = (byte)48;
      bs1[10] = (byte)48;
      bs1[11] = (byte)48;
      bs1[12] = (byte)48;
      bs1[13] = (byte)48;
      bs1[14] = (byte)48;
      bs1[15] = (byte)48;
      bs1[16] = (byte)48;
      bs1[17] = (byte)48;
      bs1[18] = (byte)48;
      bs1[19] = (byte)48;
      bs1[20] = (byte)48;
      bs1[21] = (byte)48;
      bs1[22] = (byte)48;
      bs1[23] = (byte)48;
      bs1[24] = (byte)48;
      bs1[25] = (byte)48;
      bs1[26] = (byte)48;
      bs1[27] = (byte)48;
      bs1[28] = (byte)48;
      bs1[29] = (byte)48;
      bs1[30] = (byte)48;
      bs1[31] = (byte)48;
      bs1[32] = (byte)48;
      bs1[33] = (byte)48;
      bs1[34] = (byte)48;
      bs1[35] = (byte)48;
      bs1[36] = (byte)48;
      bs1[37] = (byte)48;
      bs1[38] = (byte)48;
      bs1[39] = (byte)48;
      bs1[40] = (byte)48;
      bs1[41] = (byte)48;
      bs1[42] = (byte)48;
      bs1[43] = (byte)48;
      bs1[44] = (byte)48;
      bs1[45] = (byte)48;
      bs1[46] = (byte)48;
      bs1[47] = (byte)48;
      bs1[48] = (byte)48;
      bs1[49] = (byte)48;
      bs1[50] = (byte)48;
      bs1[51] = (byte)48;
      bs1[52] = (byte)48;
      bs1[53] = (byte)48;
      bs1[54] = (byte)48;
      bs1[55] = (byte)48;
      bs1[56] = (byte)48;
      bs1[57] = (byte)48;
      bs1[58] = (byte)48;
      bs1[59] = (byte)48;
      bs1[60] = (byte)48;
      bs1[61] = (byte)48;
      bs1[62] = (byte)48;
      bs1[63] = (byte)48;
      bs1[64] = (byte)48;
      bs1[65] = (byte)48;
      bs1[66] = (byte)48;
      bs1[67] = (byte)48;
      bs1[68] = (byte)48;
      bs1[69] = (byte)48;
      bs1[70] = (byte)48;
      bs1[71] = (byte)48;
      bs1[72] = (byte)48;
      bs1[73] = (byte)48;
      bs1[74] = (byte)48;
      bs1[75] = (byte)48;
      bs1[76] = (byte)48;
      bs1[77] = (byte)48;
      bs1[78] = (byte)48;
      bs1[79] = (byte)48;
      bs1[80] = (byte)48;
      bs1[81] = (byte)48;
      bs1[82] = (byte)48;
      bs1[83] = (byte)48;
      bs1[84] = (byte)48;
      bs1[85] = (byte)48;
      bs1[86] = (byte)48;
      bs1[87] = (byte)48;
      bs1[88] = (byte)48;
      bs1[89] = (byte)48;
      bs1[90] = (byte)48;
      bs1[91] = (byte)48;
      bs1[92] = (byte)48;
      bs1[93] = (byte)48;
      bs1[94] = (byte)48;
      bs1[95] = (byte)48;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 65;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[124];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[124];
      bs3[1] = (byte)48;
      bs3[2] = (byte)48;
      bs3[3] = (byte)48;
      bs3[4] = (byte)48;
      bs3[5] = (byte)48;
      bs3[6] = (byte)48;
      bs3[7] = (byte)48;
      bs3[8] = (byte)48;
      bs3[9] = (byte)48;
      bs3[10] = (byte)48;
      bs3[11] = (byte)48;
      bs3[12] = (byte)48;
      bs3[13] = (byte)48;
      bs3[14] = (byte)48;
      bs3[15] = (byte)48;
      bs3[16] = (byte)48;
      bs3[17] = (byte)48;
      bs3[18] = (byte)48;
      bs3[19] = (byte)48;
      bs3[20] = (byte)48;
      bs3[21] = (byte)48;
      bs3[22] = (byte)48;
      bs3[23] = (byte)48;
      bs3[24] = (byte)48;
      bs3[25] = (byte)48;
      bs3[26] = (byte)48;
      bs3[27] = (byte)48;
      bs3[28] = (byte)48;
      bs3[29] = (byte)48;
      bs3[30] = (byte)48;
      bs3[31] = (byte)48;
      bs3[32] = (byte)48;
      bs3[33] = (byte)48;
      bs3[34] = (byte)48;
      bs3[35] = (byte)48;
      bs3[36] = (byte)48;
      bs3[37] = (byte)48;
      bs3[38] = (byte)48;
      bs3[39] = (byte)48;
      bs3[40] = (byte)48;
      bs3[41] = (byte)48;
      bs3[42] = (byte)48;
      bs3[43] = (byte)48;
      bs3[44] = (byte)48;
      bs3[45] = (byte)48;
      bs3[46] = (byte)48;
      bs3[47] = (byte)48;
      bs3[48] = (byte)48;
      bs3[49] = (byte)48;
      bs3[50] = (byte)48;
      bs3[51] = (byte)48;
      bs3[52] = (byte)48;
      bs3[53] = (byte)48;
      bs3[54] = (byte)48;
      bs3[55] = (byte)48;
      bs3[56] = (byte)48;
      bs3[57] = (byte)48;
      bs3[58] = (byte)48;
      bs3[59] = (byte)48;
      bs3[60] = (byte)48;
      bs3[61] = (byte)48;
      bs3[62] = (byte)48;
      bs3[63] = (byte)48;
      bs3[64] = (byte)48;
      bs3[65] = (byte)48;
      bs3[66] = (byte)48;
      bs3[67] = (byte)48;
      bs3[68] = (byte)48;
      bs3[69] = (byte)48;
      bs3[70] = (byte)48;
      bs3[71] = (byte)48;
      bs3[72] = (byte)48;
      bs3[73] = (byte)48;
      bs3[74] = (byte)48;
      bs3[75] = (byte)48;
      bs3[76] = (byte)48;
      bs3[77] = (byte)48;
      bs3[78] = (byte)48;
      bs3[79] = (byte)48;
      bs3[80] = (byte)48;
      bs3[81] = (byte)48;
      bs3[82] = (byte)48;
      bs3[83] = (byte)48;
      bs3[84] = (byte)48;
      bs3[85] = (byte)48;
      bs3[86] = (byte)48;
      bs3[87] = (byte)48;
      bs3[88] = (byte)48;
      bs3[89] = (byte)48;
      bs3[90] = (byte)48;
      bs3[91] = (byte)48;
      bs3[92] = (byte)48;
      bs3[93] = (byte)48;
      bs3[94] = (byte)48;
      bs3[95] = (byte)48;
      bs3[96] = (byte)48;
      bs3[97] = (byte)48;
      bs3[98] = (byte)48;
      bs3[99] = (byte)48;
      bs3[100] = (byte)48;
      bs3[101] = (byte)48;
      bs3[102] = (byte)48;
      bs3[103] = (byte)48;
      bs3[104] = (byte)48;
      bs3[105] = (byte)48;
      bs3[106] = (byte)48;
      bs3[107] = (byte)48;
      bs3[108] = (byte)48;
      bs3[109] = (byte)48;
      bs3[110] = (byte)48;
      bs3[111] = (byte)48;
      bs3[112] = (byte)48;
      bs3[113] = (byte)48;
      bs3[114] = (byte)48;
      bs3[115] = (byte)48;
      bs3[116] = (byte)48;
      bs3[117] = (byte)48;
      bs3[118] = (byte)48;
      bs3[119] = (byte)48;
      bs3[121] = (byte)48;
      bs3[122] = (byte)48;
      bs3[123] = (byte)48;
      token1 = this.numeric_case(s0, token, (byte)48, bs3, 122);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(124, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[2]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[3]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[4]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[5]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[6]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[7]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[8]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[9]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[10]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[11]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[12]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[13]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[14]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[15]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[16]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[17]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[18]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[19]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[20]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[21]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[22]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[23]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[24]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[25]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[26]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[27]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[28]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[29]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[30]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[31]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[32]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[33]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[34]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[35]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[36]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[37]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[38]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[39]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[40]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[41]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[42]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[43]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[44]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[45]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[46]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[47]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[48]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[49]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[50]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[51]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[52]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[53]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[54]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[55]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[56]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[57]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[58]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[59]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[60]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[61]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[62]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[63]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[64]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[65]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[66]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[67]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[68]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[69]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[70]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[71]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[72]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[73]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[74]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[75]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[76]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[77]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[78]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[79]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[80]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[81]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[82]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[83]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[84]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[85]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[86]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[87]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[88]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[89]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[90]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[91]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[92]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[93]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[94]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[95]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[96]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[97]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[98]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[99]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[100]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[101]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[102]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[103]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[104]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[105]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[106]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[107]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[108]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[109]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[110]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[111]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[112]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[113]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[114]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[115]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[116]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[117]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[118]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[119]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[120]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[121]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[122]);
      Assert.AreEqual<byte>((byte)48, token1.token_string[123]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void numeric_case62()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[3];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[84];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[80];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[79];
      bs3[1] = (byte)1;
      bs3[2] = (byte)10;
      token1 = this.numeric_case(s0, token, (byte)49, bs3, 3);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(80, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)1, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[4]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[5]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[6]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[8]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[33]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[34]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[35]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[36]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[37]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[38]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[39]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[40]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[41]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[42]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[43]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[44]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[45]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[46]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[47]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[48]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[49]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[50]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[51]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[52]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[53]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[54]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[55]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[56]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[57]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[58]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[59]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[60]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[61]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[62]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[63]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[64]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[65]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[66]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[67]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[68]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[69]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[70]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[71]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[72]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[73]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[74]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[75]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[76]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[77]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[78]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[79]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void numeric_case226()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[96];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[80];
      bs1[64] = (byte)49;
      bs1[65] = (byte)1;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 64;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[96];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token1 = this.numeric_case(s0, token, (byte)49, bs1, 1);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(96, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)49, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[4]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[5]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[6]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[8]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[33]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[34]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[35]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[36]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[37]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[38]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[39]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[40]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[41]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[42]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[43]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[44]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[45]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[46]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[47]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[48]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[49]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[50]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[51]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[52]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[53]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[54]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[55]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[56]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[57]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[58]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[59]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[60]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[61]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[62]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[63]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[64]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[65]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[66]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[67]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[68]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[69]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[70]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[71]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[72]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[73]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[74]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[75]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[76]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[77]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[78]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[79]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[80]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[81]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[82]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[83]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[84]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[85]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[86]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[87]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[88]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[89]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[90]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[91]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[92]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[93]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[94]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[95]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void numeric_case687()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[64];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[80];
      bs1[32] = (byte)97;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 32;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[72];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[64];
      bs3[0] = (byte)9;
      bs3[1] = (byte)9;
      token1 = this.numeric_case(s0, token, (byte)48, bs3, 2);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(72, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)97, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)97, token1.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[4]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[5]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[6]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[8]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[33]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[34]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[35]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[36]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[37]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[38]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[39]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[40]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[41]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[42]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[43]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[44]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[45]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[46]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[47]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[48]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[49]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[50]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[51]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[52]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[53]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[54]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[55]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[56]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[57]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[58]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[59]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[60]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[61]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[62]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[63]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[64]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[65]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[66]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[67]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[68]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[69]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[70]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[71]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void numeric_case112()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[80];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[sbyte.MaxValue];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 125;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[80];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[70];
      bs3[0] = (byte)9;
      bs3[1] = (byte)9;
      token1 = this.numeric_case(s0, token, (byte)0, bs3, 3);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(80, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)9, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[4]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[5]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[6]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[8]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[33]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[34]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[35]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[36]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[37]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[38]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[39]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[40]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[41]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[42]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[43]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[44]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[45]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[46]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[47]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[48]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[49]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[50]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[51]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[52]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[53]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[54]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[55]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[56]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[57]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[58]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[59]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[60]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[61]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[62]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[63]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[64]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[65]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[66]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[67]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[68]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[69]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[70]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[71]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[72]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[73]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[74]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[75]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[76]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[77]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[78]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[79]);
      Assert.AreEqual<int>(18, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void numeric_caseThrowsIndexOutOfRangeException12()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[65];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[6];
      bs1[0] = (byte)48;
      bs1[1] = (byte)48;
      bs1[2] = (byte)48;
      bs1[3] = (byte)48;
      bs1[4] = (byte)48;
      bs1[5] = (byte)50;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 4;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[65];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[5];
      bs3[0] = (byte)48;
      bs3[1] = (byte)48;
      bs3[2] = (byte)48;
      bs3[3] = (byte)48;
      bs3[4] = (byte)48;
      token1 = this.numeric_case(s0, token, (byte)49, bs3, 1);
      disposables.Dispose();
    }
}
    }
}
