// <copyright file="UndirectedGraphTVertexTEdgeTest.AddVertexRange.g.cs" company="MSIT">Copyright © MSIT 2007</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace QuickGraph
{
    public partial class UndirectedGraphTVertexTEdgeTest
    {
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange642()
{
    UndirectedGraph<int, Edge<int>> undirectedGraph;
    int i;
    undirectedGraph = new UndirectedGraph<int, Edge<int>>
                          (false, (EdgeEqualityComparer<int, Edge<int>>)null);
    undirectedGraph.EdgeCapacity = 0;
    int[] ints = new int[0];
    i = this.AddVertexRange<int, Edge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange665()
{
    UndirectedGraph<int, Edge<int>> undirectedGraph;
    int i;
    undirectedGraph = new UndirectedGraph<int, Edge<int>>
                          (false, (EdgeEqualityComparer<int, Edge<int>>)null);
    undirectedGraph.EdgeCapacity = int.MinValue;
    int[] ints = new int[1];
    i = this.AddVertexRange<int, Edge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(int.MinValue, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange66501()
{
    UndirectedGraph<int, Edge<int>> undirectedGraph;
    int i;
    undirectedGraph = new UndirectedGraph<int, Edge<int>>
                          (false, (EdgeEqualityComparer<int, Edge<int>>)null);
    undirectedGraph.EdgeCapacity = 0;
    int[] ints = new int[1];
    i = this.AddVertexRange<int, Edge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange796()
{
    UndirectedGraph<int, Edge<int>> undirectedGraph;
    int i;
    undirectedGraph = new UndirectedGraph<int, Edge<int>>
                          (false, (EdgeEqualityComparer<int, Edge<int>>)null);
    undirectedGraph.EdgeCapacity = 0;
    int[] ints = new int[2];
    i = this.AddVertexRange<int, Edge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange32()
{
    UndirectedGraph<int, Edge<int>> undirectedGraph;
    int i;
    undirectedGraph = new UndirectedGraph<int, Edge<int>>
                          (false, (EdgeEqualityComparer<int, Edge<int>>)null);
    undirectedGraph.EdgeCapacity = 0;
    int[] ints = new int[2];
    ints[0] = 272;
    ints[1] = 176;
    i = this.AddVertexRange<int, Edge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(2, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange951()
{
    UndirectedGraph<int, Edge<int>> undirectedGraph;
    int i;
    undirectedGraph = new UndirectedGraph<int, Edge<int>>
                          (false, (EdgeEqualityComparer<int, Edge<int>>)null);
    undirectedGraph.EdgeCapacity = int.MinValue;
    int[] ints = new int[2];
    ints[1] = int.MinValue;
    i = this.AddVertexRange<int, Edge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(2, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(int.MinValue, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange975()
{
    UndirectedGraph<int, Edge<int>> undirectedGraph;
    int i;
    undirectedGraph = new UndirectedGraph<int, Edge<int>>
                          (false, (EdgeEqualityComparer<int, Edge<int>>)null);
    undirectedGraph.EdgeCapacity = 0;
    int[] ints = new int[3];
    i = this.AddVertexRange<int, Edge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange703()
{
    UndirectedGraph<int, Edge<int>> undirectedGraph;
    int i;
    undirectedGraph = new UndirectedGraph<int, Edge<int>>
                          (false, (EdgeEqualityComparer<int, Edge<int>>)null);
    undirectedGraph.EdgeCapacity = int.MinValue;
    int[] ints = new int[5];
    ints[0] = 2;
    ints[1] = 3790;
    ints[3] = 2;
    ints[4] = 626;
    i = this.AddVertexRange<int, Edge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(4, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(int.MinValue, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange64201()
{
    UndirectedGraph<int, SEdge<int>> undirectedGraph;
    int i;
    undirectedGraph = UndirectedGraphFactory.Create(false);
    int[] ints = new int[0];
    i =
      this.AddVertexRange<int, SEdge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange66502()
{
    UndirectedGraph<int, SEdge<int>> undirectedGraph;
    int i;
    undirectedGraph = UndirectedGraphFactory.Create(false);
    int[] ints = new int[1];
    i =
      this.AddVertexRange<int, SEdge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange79601()
{
    UndirectedGraph<int, SEdge<int>> undirectedGraph;
    int i;
    undirectedGraph = UndirectedGraphFactory.Create(false);
    int[] ints = new int[2];
    i =
      this.AddVertexRange<int, SEdge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(1, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange239()
{
    UndirectedGraph<int, SEdge<int>> undirectedGraph;
    int i;
    undirectedGraph = UndirectedGraphFactory.Create(false);
    int[] ints = new int[2];
    ints[0] = 261;
    ints[1] = 745;
    i =
      this.AddVertexRange<int, SEdge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(2, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange691()
{
    UndirectedGraph<int, SEdge<int>> undirectedGraph;
    int i;
    undirectedGraph = UndirectedGraphFactory.Create(false);
    int[] ints = new int[4];
    ints[0] = 573018;
    ints[1] = 1073907563;
    ints[2] = 165707;
    ints[3] = 769;
    i =
      this.AddVertexRange<int, SEdge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(4, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void AddVertexRange114()
{
    UndirectedGraph<int, SEdge<int>> undirectedGraph;
    int i;
    undirectedGraph = UndirectedGraphFactory.Create(false);
    int[] ints = new int[6];
    ints[1] = 337;
    i =
      this.AddVertexRange<int, SEdge<int>>(undirectedGraph, (IEnumerable<int>)ints);
    Assert.AreEqual<int>(2, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
    }
}
