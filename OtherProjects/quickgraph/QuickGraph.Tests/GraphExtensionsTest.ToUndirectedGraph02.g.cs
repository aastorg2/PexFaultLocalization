// <copyright file="GraphExtensionsTest.ToUndirectedGraph02.g.cs" company="MSIT">Copyright © MSIT 2007</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace QuickGraph
{
    public partial class GraphExtensionsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToUndirectedGraph02260()
{
    UndirectedGraph<int, SEquatableEdge<int>> undirectedGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[0];
    undirectedGraph = this.ToUndirectedGraph02<int>
                          ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(true, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToUndirectedGraph02325()
{
    UndirectedGraph<int, SEquatableEdge<int>> undirectedGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[1];
    undirectedGraph = this.ToUndirectedGraph02<int>
                          ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(true, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(1, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToUndirectedGraph02940()
{
    UndirectedGraph<int, SEquatableEdge<int>> undirectedGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[1];
    SEquatableEdge<int> s0 = new SEquatableEdge<int>(default(int), int.MinValue);
    sEquatableEdges[0] = s0;
    undirectedGraph = this.ToUndirectedGraph02<int>
                          ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(true, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(1, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToUndirectedGraph02438()
{
    UndirectedGraph<int, SEquatableEdge<int>> undirectedGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[2];
    undirectedGraph = this.ToUndirectedGraph02<int>
                          ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(true, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(2, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToUndirectedGraph02162()
{
    UndirectedGraph<int, SEquatableEdge<int>> undirectedGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[3];
    SEquatableEdge<int> s0 = new SEquatableEdge<int>(1, 2);
    sEquatableEdges[0] = s0;
    SEquatableEdge<int> s1 = new SEquatableEdge<int>(172, 172);
    sEquatableEdges[1] = s1;
    undirectedGraph = this.ToUndirectedGraph02<int>
                          ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(true, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(3, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToUndirectedGraph02196()
{
    UndirectedGraph<int, SEquatableEdge<int>> undirectedGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[5];
    undirectedGraph = this.ToUndirectedGraph02<int>
                          ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(true, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(5, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToUndirectedGraph02166()
{
    UndirectedGraph<int, SEquatableEdge<int>> undirectedGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[3];
    SEquatableEdge<int> s0 = new SEquatableEdge<int>(1623335945, 1623335945);
    sEquatableEdges[0] = s0;
    SEquatableEdge<int> s1 = new SEquatableEdge<int>(1887439544, default(int));
    sEquatableEdges[1] = s1;
    SEquatableEdge<int> s2 = new SEquatableEdge<int>(2017597721, -260044104);
    sEquatableEdges[2] = s2;
    undirectedGraph = this.ToUndirectedGraph02<int>
                          ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(true, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(3, undirectedGraph.EdgeCount);
}
    }
}
