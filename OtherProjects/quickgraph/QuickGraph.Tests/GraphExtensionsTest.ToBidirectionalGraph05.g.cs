// <copyright file="GraphExtensionsTest.ToBidirectionalGraph05.g.cs" company="MSIT">Copyright © MSIT 2007</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace QuickGraph
{
    public partial class GraphExtensionsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToBidirectionalGraph05260()
{
    BidirectionalGraph<int, SEquatableEdge<int>> bidirectionalGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[0];
    bidirectionalGraph = this.ToBidirectionalGraph05<int>
                             ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)bidirectionalGraph);
    Assert.AreEqual<int>(-1, bidirectionalGraph.EdgeCapacity);
    Assert.AreEqual<bool>(true, bidirectionalGraph.IsDirected);
    Assert.AreEqual<bool>(true, bidirectionalGraph.AllowParallelEdges);
    Assert.AreEqual<bool>(true, bidirectionalGraph.IsEdgesEmpty);
    Assert.AreEqual<int>(0, bidirectionalGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToBidirectionalGraph05325()
{
    BidirectionalGraph<int, SEquatableEdge<int>> bidirectionalGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[1];
    bidirectionalGraph = this.ToBidirectionalGraph05<int>
                             ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)bidirectionalGraph);
    Assert.AreEqual<int>(-1, bidirectionalGraph.EdgeCapacity);
    Assert.AreEqual<bool>(true, bidirectionalGraph.IsDirected);
    Assert.AreEqual<bool>(true, bidirectionalGraph.AllowParallelEdges);
    Assert.AreEqual<bool>(false, bidirectionalGraph.IsEdgesEmpty);
    Assert.AreEqual<int>(1, bidirectionalGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToBidirectionalGraph05940()
{
    BidirectionalGraph<int, SEquatableEdge<int>> bidirectionalGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[1];
    SEquatableEdge<int> s0 = new SEquatableEdge<int>(default(int), int.MinValue);
    sEquatableEdges[0] = s0;
    bidirectionalGraph = this.ToBidirectionalGraph05<int>
                             ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)bidirectionalGraph);
    Assert.AreEqual<int>(-1, bidirectionalGraph.EdgeCapacity);
    Assert.AreEqual<bool>(true, bidirectionalGraph.IsDirected);
    Assert.AreEqual<bool>(true, bidirectionalGraph.AllowParallelEdges);
    Assert.AreEqual<bool>(false, bidirectionalGraph.IsEdgesEmpty);
    Assert.AreEqual<int>(1, bidirectionalGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToBidirectionalGraph05786()
{
    BidirectionalGraph<int, SEquatableEdge<int>> bidirectionalGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[2];
    SEquatableEdge<int> s0 = new SEquatableEdge<int>(258, 760);
    sEquatableEdges[0] = s0;
    bidirectionalGraph = this.ToBidirectionalGraph05<int>
                             ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)bidirectionalGraph);
    Assert.AreEqual<int>(-1, bidirectionalGraph.EdgeCapacity);
    Assert.AreEqual<bool>(true, bidirectionalGraph.IsDirected);
    Assert.AreEqual<bool>(true, bidirectionalGraph.AllowParallelEdges);
    Assert.AreEqual<bool>(false, bidirectionalGraph.IsEdgesEmpty);
    Assert.AreEqual<int>(2, bidirectionalGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(GraphExtensionsTest))]
public void ToBidirectionalGraph05933()
{
    BidirectionalGraph<int, SEquatableEdge<int>> bidirectionalGraph;
    SEquatableEdge<int>[] sEquatableEdges = new SEquatableEdge<int>[3];
    SEquatableEdge<int> s0 = new SEquatableEdge<int>(704643108, 97);
    sEquatableEdges[0] = s0;
    SEquatableEdge<int> s1 = new SEquatableEdge<int>(235929636, 97);
    sEquatableEdges[1] = s1;
    bidirectionalGraph = this.ToBidirectionalGraph05<int>
                             ((IEnumerable<SEquatableEdge<int>>)sEquatableEdges);
    Assert.IsNotNull((object)bidirectionalGraph);
    Assert.AreEqual<int>(-1, bidirectionalGraph.EdgeCapacity);
    Assert.AreEqual<bool>(true, bidirectionalGraph.IsDirected);
    Assert.AreEqual<bool>(true, bidirectionalGraph.AllowParallelEdges);
    Assert.AreEqual<bool>(false, bidirectionalGraph.IsEdgesEmpty);
    Assert.AreEqual<int>(3, bidirectionalGraph.EdgeCount);
}
    }
}
