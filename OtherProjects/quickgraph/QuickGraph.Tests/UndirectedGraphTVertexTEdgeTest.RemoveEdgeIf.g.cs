// <copyright file="UndirectedGraphTVertexTEdgeTest.RemoveEdgeIf.g.cs" company="MSIT">Copyright © MSIT 2007</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace QuickGraph
{
    public partial class UndirectedGraphTVertexTEdgeTest
    {
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void RemoveEdgeIf363()
{
    UndirectedGraph<int, Edge<int>> undirectedGraph;
    int i;
    undirectedGraph = new UndirectedGraph<int, Edge<int>>
                          (false, (EdgeEqualityComparer<int, Edge<int>>)null);
    undirectedGraph.EdgeCapacity = 0;
    i = this.RemoveEdgeIf<int, Edge<int>>
            (undirectedGraph, (EdgePredicate<int, Edge<int>>)null);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
[TestMethod]
[PexGeneratedBy(typeof(UndirectedGraphTVertexTEdgeTest))]
public void RemoveEdgeIf36301()
{
    UndirectedGraph<int, SEdge<int>> undirectedGraph;
    int i;
    undirectedGraph = UndirectedGraphFactory.Create(false);
    i = this.RemoveEdgeIf<int, SEdge<int>>
            (undirectedGraph, (EdgePredicate<int, SEdge<int>>)null);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)undirectedGraph);
    Assert.IsNotNull(undirectedGraph.EdgeEqualityComparer);
    Assert.AreEqual<int>(4, undirectedGraph.EdgeCapacity);
    Assert.AreEqual<bool>(false, undirectedGraph.IsDirected);
    Assert.AreEqual<bool>(false, undirectedGraph.AllowParallelEdges);
    Assert.AreEqual<int>(0, undirectedGraph.EdgeCount);
}
    }
}
