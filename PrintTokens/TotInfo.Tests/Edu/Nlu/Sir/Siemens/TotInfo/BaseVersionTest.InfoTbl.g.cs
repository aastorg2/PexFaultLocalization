// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Edu.Nlu.Sir.Siemens.TotInfo
{
    public partial class BaseVersionTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void InfoTbl780()
{
    double d;
    int i = 0;
    d = this.InfoTbl(0, 0, (long[])null, out i);
    Assert.AreEqual<double>(-3, d);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void InfoTbl40()
{
    double d;
    int i = 0;
    d = this.InfoTbl(2, 0, (long[])null, out i);
    Assert.AreEqual<double>(-3, d);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(OverflowException))]
public void InfoTblThrowsOverflowException334()
{
    double d;
    int i = 0;
    d = this.InfoTbl(int.MinValue, 704, (long[])null, out i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(OverflowException))]
public void InfoTblThrowsOverflowException144()
{
    double d;
    int i = 0;
    d = this.InfoTbl(2, int.MinValue, (long[])null, out i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void InfoTblThrowsNullReferenceException47()
{
    double d;
    int i = 0;
    d = this.InfoTbl(2, 3, (long[])null, out i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void InfoTblThrowsIndexOutOfRangeException585()
{
    double d;
    long[] ls = new long[0];
    int i = 0;
    d = this.InfoTbl(2, 3, ls, out i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void InfoTblThrowsIndexOutOfRangeException541()
{
    double d;
    long[] ls = new long[1];
    int i = 0;
    d = this.InfoTbl(2, 3, ls, out i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void InfoTbl318()
{
    double d;
    long[] ls = new long[1];
    int i = 0;
    ls[0] = long.MinValue;
    d = this.InfoTbl(2, 3, ls, out i);
    Assert.AreEqual<double>(-2, d);
    Assert.AreEqual<int>(2, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void InfoTblThrowsIndexOutOfRangeException640()
{
    double d;
    long[] ls = new long[2];
    int i = 0;
    d = this.InfoTbl(2, 3, ls, out i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void InfoTblThrowsIndexOutOfRangeException277()
{
    double d;
    long[] ls = new long[3];
    int i = 0;
    d = this.InfoTbl(2, 3, ls, out i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void InfoTbl787()
{
    double d;
    long[] ls = new long[6];
    int i = 0;
    d = this.InfoTbl(2, 3, ls, out i);
    Assert.AreEqual<double>(-1, d);
    Assert.AreEqual<int>(2, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void InfoTbl635()
{
    double d;
    long[] ls = new long[1];
    int i = 0;
    ls[0] = long.MinValue;
    d = this.InfoTbl(1, 3, ls, out i);
    Assert.AreEqual<double>(-3, d);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(OverflowException))]
public void InfoTblThrowsOverflowException611()
{
    double d;
    long[] ls = new long[1];
    int i = 0;
    ls[0] = long.MinValue;
    d = this.InfoTbl(2, int.MinValue, ls, out i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(OverflowException))]
public void InfoTblThrowsOverflowException426()
{
    double d;
    long[] ls = new long[1];
    int i = 0;
    ls[0] = long.MinValue;
    d = this.InfoTbl(int.MinValue, 3, ls, out i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void InfoTbl447()
{
    double d;
    long[] ls = new long[6];
    int i = 0;
    ls[0] = long.MinValue;
    d = this.InfoTbl(2, 3, ls, out i);
    Assert.AreEqual<double>(-2, d);
    Assert.AreEqual<int>(2, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(OverflowException))]
public void InfoTblThrowsOverflowException715()
{
    double d;
    long[] ls = new long[0];
    int i = 0;
    d = this.InfoTbl(3, int.MinValue, ls, out i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void InfoTblThrowsIndexOutOfRangeException238()
{
    double d;
    long[] ls = new long[5];
    int i = 0;
    d = this.InfoTbl(2, 4, ls, out i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void InfoTbl446()
{
    double d;
    long[] ls = new long[1];
    int i = 0;
    ls[0] = long.MinValue;
    d = this.InfoTbl(1, 1, ls, out i);
    Assert.AreEqual<double>(-3, d);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(OverflowException))]
public void InfoTblThrowsOverflowException410()
{
    double d;
    long[] ls = new long[0];
    int i = 0;
    d = this.InfoTbl(int.MinValue, int.MinValue, ls, out i);
}
    }
}
