// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System.IO;

namespace Edu.Unl.Sir.Siemens.PrintTokens.Orig
{
    public partial class OriginalTest
    {
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void get_tokenThrowsNullReferenceException684()
{
    Token token;
    token = this.get_token((TokenStream)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void get_tokenThrowsIndexOutOfRangeException493()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      byte[] bs = new byte[4];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[4];
      bs1[3] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 0;
      characterStream.stream = bs1;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token = this.get_token(s0);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void get_token980()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      byte[] bs = new byte[80];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[80];
      bs1[1] = (byte)127;
      bs1[2] = (byte)127;
      bs1[3] = (byte)127;
      bs1[4] = (byte)127;
      bs1[5] = (byte)127;
      bs1[6] = (byte)127;
      bs1[7] = (byte)127;
      bs1[8] = (byte)127;
      bs1[9] = (byte)127;
      bs1[10] = (byte)127;
      bs1[11] = (byte)127;
      bs1[12] = (byte)127;
      bs1[13] = (byte)127;
      bs1[14] = (byte)127;
      bs1[15] = (byte)127;
      bs1[16] = (byte)127;
      bs1[17] = (byte)127;
      bs1[18] = (byte)127;
      bs1[19] = (byte)127;
      bs1[20] = (byte)127;
      bs1[21] = (byte)127;
      bs1[22] = (byte)127;
      bs1[23] = (byte)127;
      bs1[24] = (byte)127;
      bs1[25] = (byte)127;
      bs1[26] = (byte)127;
      bs1[27] = (byte)127;
      bs1[28] = (byte)127;
      bs1[29] = (byte)127;
      bs1[30] = (byte)127;
      bs1[31] = (byte)127;
      bs1[32] = (byte)127;
      bs1[33] = (byte)127;
      bs1[34] = (byte)127;
      bs1[35] = (byte)127;
      bs1[36] = (byte)127;
      bs1[37] = (byte)127;
      bs1[38] = (byte)127;
      bs1[39] = (byte)127;
      bs1[40] = (byte)127;
      bs1[41] = (byte)127;
      bs1[42] = (byte)127;
      bs1[43] = (byte)127;
      bs1[44] = (byte)127;
      bs1[45] = (byte)127;
      bs1[46] = (byte)127;
      bs1[47] = (byte)127;
      bs1[48] = (byte)127;
      bs1[49] = (byte)127;
      bs1[50] = (byte)127;
      bs1[51] = (byte)127;
      bs1[52] = (byte)127;
      bs1[53] = (byte)127;
      bs1[54] = (byte)127;
      bs1[55] = (byte)127;
      bs1[56] = (byte)127;
      bs1[57] = (byte)127;
      bs1[58] = (byte)127;
      bs1[59] = (byte)127;
      bs1[60] = (byte)127;
      bs1[61] = (byte)127;
      bs1[62] = (byte)127;
      bs1[63] = (byte)127;
      bs1[64] = (byte)127;
      bs1[65] = (byte)127;
      bs1[66] = (byte)127;
      bs1[67] = (byte)127;
      bs1[68] = (byte)127;
      bs1[69] = (byte)127;
      bs1[70] = (byte)127;
      bs1[71] = (byte)127;
      bs1[72] = (byte)127;
      bs1[73] = (byte)127;
      bs1[74] = (byte)127;
      bs1[75] = (byte)127;
      bs1[76] = (byte)127;
      bs1[77] = (byte)127;
      bs1[78] = (byte)127;
      bs1[79] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 0;
      characterStream.stream = bs1;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token = this.get_token(s0);
      disposables.Dispose();
      Assert.IsNotNull((object)token);
      Assert.IsNotNull((object)(token.token_string));
      Assert.AreEqual<int>(80, token.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token.token_string[4]);
      Assert.AreEqual<byte>((byte)0, token.token_string[5]);
      Assert.AreEqual<byte>((byte)0, token.token_string[6]);
      Assert.AreEqual<byte>((byte)0, token.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token.token_string[8]);
      Assert.AreEqual<byte>((byte)0, token.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token.token_string[33]);
      Assert.AreEqual<byte>((byte)0, token.token_string[34]);
      Assert.AreEqual<byte>((byte)0, token.token_string[35]);
      Assert.AreEqual<byte>((byte)0, token.token_string[36]);
      Assert.AreEqual<byte>((byte)0, token.token_string[37]);
      Assert.AreEqual<byte>((byte)0, token.token_string[38]);
      Assert.AreEqual<byte>((byte)0, token.token_string[39]);
      Assert.AreEqual<byte>((byte)0, token.token_string[40]);
      Assert.AreEqual<byte>((byte)0, token.token_string[41]);
      Assert.AreEqual<byte>((byte)0, token.token_string[42]);
      Assert.AreEqual<byte>((byte)0, token.token_string[43]);
      Assert.AreEqual<byte>((byte)0, token.token_string[44]);
      Assert.AreEqual<byte>((byte)0, token.token_string[45]);
      Assert.AreEqual<byte>((byte)0, token.token_string[46]);
      Assert.AreEqual<byte>((byte)0, token.token_string[47]);
      Assert.AreEqual<byte>((byte)0, token.token_string[48]);
      Assert.AreEqual<byte>((byte)0, token.token_string[49]);
      Assert.AreEqual<byte>((byte)0, token.token_string[50]);
      Assert.AreEqual<byte>((byte)0, token.token_string[51]);
      Assert.AreEqual<byte>((byte)0, token.token_string[52]);
      Assert.AreEqual<byte>((byte)0, token.token_string[53]);
      Assert.AreEqual<byte>((byte)0, token.token_string[54]);
      Assert.AreEqual<byte>((byte)0, token.token_string[55]);
      Assert.AreEqual<byte>((byte)0, token.token_string[56]);
      Assert.AreEqual<byte>((byte)0, token.token_string[57]);
      Assert.AreEqual<byte>((byte)0, token.token_string[58]);
      Assert.AreEqual<byte>((byte)0, token.token_string[59]);
      Assert.AreEqual<byte>((byte)0, token.token_string[60]);
      Assert.AreEqual<byte>((byte)0, token.token_string[61]);
      Assert.AreEqual<byte>((byte)0, token.token_string[62]);
      Assert.AreEqual<byte>((byte)0, token.token_string[63]);
      Assert.AreEqual<byte>((byte)0, token.token_string[64]);
      Assert.AreEqual<byte>((byte)0, token.token_string[65]);
      Assert.AreEqual<byte>((byte)0, token.token_string[66]);
      Assert.AreEqual<byte>((byte)0, token.token_string[67]);
      Assert.AreEqual<byte>((byte)0, token.token_string[68]);
      Assert.AreEqual<byte>((byte)0, token.token_string[69]);
      Assert.AreEqual<byte>((byte)0, token.token_string[70]);
      Assert.AreEqual<byte>((byte)0, token.token_string[71]);
      Assert.AreEqual<byte>((byte)0, token.token_string[72]);
      Assert.AreEqual<byte>((byte)0, token.token_string[73]);
      Assert.AreEqual<byte>((byte)0, token.token_string[74]);
      Assert.AreEqual<byte>((byte)0, token.token_string[75]);
      Assert.AreEqual<byte>((byte)0, token.token_string[76]);
      Assert.AreEqual<byte>((byte)0, token.token_string[77]);
      Assert.AreEqual<byte>((byte)0, token.token_string[78]);
      Assert.AreEqual<byte>((byte)0, token.token_string[79]);
      Assert.AreEqual<int>(-1, token.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void get_token823()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      byte[] bs = new byte[2];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[2];
      bs1[0] = (byte)1;
      bs1[1] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 0;
      characterStream.stream = bs1;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token = this.get_token(s0);
      disposables.Dispose();
      Assert.IsNotNull((object)token);
      Assert.IsNotNull((object)(token.token_string));
      Assert.AreEqual<int>(80, token.token_string.Length);
      Assert.AreEqual<byte>((byte)1, token.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token.token_string[4]);
      Assert.AreEqual<byte>((byte)0, token.token_string[5]);
      Assert.AreEqual<byte>((byte)0, token.token_string[6]);
      Assert.AreEqual<byte>((byte)0, token.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token.token_string[8]);
      Assert.AreEqual<byte>((byte)0, token.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token.token_string[33]);
      Assert.AreEqual<byte>((byte)0, token.token_string[34]);
      Assert.AreEqual<byte>((byte)0, token.token_string[35]);
      Assert.AreEqual<byte>((byte)0, token.token_string[36]);
      Assert.AreEqual<byte>((byte)0, token.token_string[37]);
      Assert.AreEqual<byte>((byte)0, token.token_string[38]);
      Assert.AreEqual<byte>((byte)0, token.token_string[39]);
      Assert.AreEqual<byte>((byte)0, token.token_string[40]);
      Assert.AreEqual<byte>((byte)0, token.token_string[41]);
      Assert.AreEqual<byte>((byte)0, token.token_string[42]);
      Assert.AreEqual<byte>((byte)0, token.token_string[43]);
      Assert.AreEqual<byte>((byte)0, token.token_string[44]);
      Assert.AreEqual<byte>((byte)0, token.token_string[45]);
      Assert.AreEqual<byte>((byte)0, token.token_string[46]);
      Assert.AreEqual<byte>((byte)0, token.token_string[47]);
      Assert.AreEqual<byte>((byte)0, token.token_string[48]);
      Assert.AreEqual<byte>((byte)0, token.token_string[49]);
      Assert.AreEqual<byte>((byte)0, token.token_string[50]);
      Assert.AreEqual<byte>((byte)0, token.token_string[51]);
      Assert.AreEqual<byte>((byte)0, token.token_string[52]);
      Assert.AreEqual<byte>((byte)0, token.token_string[53]);
      Assert.AreEqual<byte>((byte)0, token.token_string[54]);
      Assert.AreEqual<byte>((byte)0, token.token_string[55]);
      Assert.AreEqual<byte>((byte)0, token.token_string[56]);
      Assert.AreEqual<byte>((byte)0, token.token_string[57]);
      Assert.AreEqual<byte>((byte)0, token.token_string[58]);
      Assert.AreEqual<byte>((byte)0, token.token_string[59]);
      Assert.AreEqual<byte>((byte)0, token.token_string[60]);
      Assert.AreEqual<byte>((byte)0, token.token_string[61]);
      Assert.AreEqual<byte>((byte)0, token.token_string[62]);
      Assert.AreEqual<byte>((byte)0, token.token_string[63]);
      Assert.AreEqual<byte>((byte)0, token.token_string[64]);
      Assert.AreEqual<byte>((byte)0, token.token_string[65]);
      Assert.AreEqual<byte>((byte)0, token.token_string[66]);
      Assert.AreEqual<byte>((byte)0, token.token_string[67]);
      Assert.AreEqual<byte>((byte)0, token.token_string[68]);
      Assert.AreEqual<byte>((byte)0, token.token_string[69]);
      Assert.AreEqual<byte>((byte)0, token.token_string[70]);
      Assert.AreEqual<byte>((byte)0, token.token_string[71]);
      Assert.AreEqual<byte>((byte)0, token.token_string[72]);
      Assert.AreEqual<byte>((byte)0, token.token_string[73]);
      Assert.AreEqual<byte>((byte)0, token.token_string[74]);
      Assert.AreEqual<byte>((byte)0, token.token_string[75]);
      Assert.AreEqual<byte>((byte)0, token.token_string[76]);
      Assert.AreEqual<byte>((byte)0, token.token_string[77]);
      Assert.AreEqual<byte>((byte)0, token.token_string[78]);
      Assert.AreEqual<byte>((byte)0, token.token_string[79]);
      Assert.AreEqual<int>(-1, token.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void get_tokenThrowsIndexOutOfRangeException296()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      byte[] bs = new byte[9];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[9];
      bs1[0] = (byte)127;
      bs1[1] = (byte)32;
      bs1[2] = (byte)127;
      bs1[3] = (byte)127;
      bs1[4] = (byte)127;
      bs1[5] = (byte)127;
      bs1[6] = (byte)127;
      bs1[7] = (byte)127;
      bs1[8] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token = this.get_token(s0);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void get_token77()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      byte[] bs = new byte[14];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[14];
      bs1[0] = (byte)12;
      bs1[1] = (byte)127;
      bs1[2] = (byte)127;
      bs1[3] = (byte)127;
      bs1[4] = (byte)127;
      bs1[5] = (byte)127;
      bs1[6] = (byte)127;
      bs1[7] = (byte)127;
      bs1[8] = (byte)127;
      bs1[9] = (byte)127;
      bs1[10] = (byte)127;
      bs1[11] = (byte)127;
      bs1[12] = (byte)127;
      bs1[13] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 0;
      characterStream.stream = bs1;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token = this.get_token(s0);
      disposables.Dispose();
      Assert.IsNotNull((object)token);
      Assert.IsNotNull((object)(token.token_string));
      Assert.AreEqual<int>(80, token.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token.token_string[4]);
      Assert.AreEqual<byte>((byte)0, token.token_string[5]);
      Assert.AreEqual<byte>((byte)0, token.token_string[6]);
      Assert.AreEqual<byte>((byte)0, token.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token.token_string[8]);
      Assert.AreEqual<byte>((byte)0, token.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token.token_string[33]);
      Assert.AreEqual<byte>((byte)0, token.token_string[34]);
      Assert.AreEqual<byte>((byte)0, token.token_string[35]);
      Assert.AreEqual<byte>((byte)0, token.token_string[36]);
      Assert.AreEqual<byte>((byte)0, token.token_string[37]);
      Assert.AreEqual<byte>((byte)0, token.token_string[38]);
      Assert.AreEqual<byte>((byte)0, token.token_string[39]);
      Assert.AreEqual<byte>((byte)0, token.token_string[40]);
      Assert.AreEqual<byte>((byte)0, token.token_string[41]);
      Assert.AreEqual<byte>((byte)0, token.token_string[42]);
      Assert.AreEqual<byte>((byte)0, token.token_string[43]);
      Assert.AreEqual<byte>((byte)0, token.token_string[44]);
      Assert.AreEqual<byte>((byte)0, token.token_string[45]);
      Assert.AreEqual<byte>((byte)0, token.token_string[46]);
      Assert.AreEqual<byte>((byte)0, token.token_string[47]);
      Assert.AreEqual<byte>((byte)0, token.token_string[48]);
      Assert.AreEqual<byte>((byte)0, token.token_string[49]);
      Assert.AreEqual<byte>((byte)0, token.token_string[50]);
      Assert.AreEqual<byte>((byte)0, token.token_string[51]);
      Assert.AreEqual<byte>((byte)0, token.token_string[52]);
      Assert.AreEqual<byte>((byte)0, token.token_string[53]);
      Assert.AreEqual<byte>((byte)0, token.token_string[54]);
      Assert.AreEqual<byte>((byte)0, token.token_string[55]);
      Assert.AreEqual<byte>((byte)0, token.token_string[56]);
      Assert.AreEqual<byte>((byte)0, token.token_string[57]);
      Assert.AreEqual<byte>((byte)0, token.token_string[58]);
      Assert.AreEqual<byte>((byte)0, token.token_string[59]);
      Assert.AreEqual<byte>((byte)0, token.token_string[60]);
      Assert.AreEqual<byte>((byte)0, token.token_string[61]);
      Assert.AreEqual<byte>((byte)0, token.token_string[62]);
      Assert.AreEqual<byte>((byte)0, token.token_string[63]);
      Assert.AreEqual<byte>((byte)0, token.token_string[64]);
      Assert.AreEqual<byte>((byte)0, token.token_string[65]);
      Assert.AreEqual<byte>((byte)0, token.token_string[66]);
      Assert.AreEqual<byte>((byte)0, token.token_string[67]);
      Assert.AreEqual<byte>((byte)0, token.token_string[68]);
      Assert.AreEqual<byte>((byte)0, token.token_string[69]);
      Assert.AreEqual<byte>((byte)0, token.token_string[70]);
      Assert.AreEqual<byte>((byte)0, token.token_string[71]);
      Assert.AreEqual<byte>((byte)0, token.token_string[72]);
      Assert.AreEqual<byte>((byte)0, token.token_string[73]);
      Assert.AreEqual<byte>((byte)0, token.token_string[74]);
      Assert.AreEqual<byte>((byte)0, token.token_string[75]);
      Assert.AreEqual<byte>((byte)0, token.token_string[76]);
      Assert.AreEqual<byte>((byte)0, token.token_string[77]);
      Assert.AreEqual<byte>((byte)0, token.token_string[78]);
      Assert.AreEqual<byte>((byte)0, token.token_string[79]);
      Assert.AreEqual<int>(-1, token.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void get_token756()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      byte[] bs = new byte[80];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[80];
      bs1[0] = (byte)9;
      bs1[79] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 0;
      characterStream.stream = bs1;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token = this.get_token(s0);
      disposables.Dispose();
      Assert.IsNotNull((object)token);
      Assert.IsNotNull((object)(token.token_string));
      Assert.AreEqual<int>(80, token.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token.token_string[4]);
      Assert.AreEqual<byte>((byte)0, token.token_string[5]);
      Assert.AreEqual<byte>((byte)0, token.token_string[6]);
      Assert.AreEqual<byte>((byte)0, token.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token.token_string[8]);
      Assert.AreEqual<byte>((byte)0, token.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token.token_string[33]);
      Assert.AreEqual<byte>((byte)0, token.token_string[34]);
      Assert.AreEqual<byte>((byte)0, token.token_string[35]);
      Assert.AreEqual<byte>((byte)0, token.token_string[36]);
      Assert.AreEqual<byte>((byte)0, token.token_string[37]);
      Assert.AreEqual<byte>((byte)0, token.token_string[38]);
      Assert.AreEqual<byte>((byte)0, token.token_string[39]);
      Assert.AreEqual<byte>((byte)0, token.token_string[40]);
      Assert.AreEqual<byte>((byte)0, token.token_string[41]);
      Assert.AreEqual<byte>((byte)0, token.token_string[42]);
      Assert.AreEqual<byte>((byte)0, token.token_string[43]);
      Assert.AreEqual<byte>((byte)0, token.token_string[44]);
      Assert.AreEqual<byte>((byte)0, token.token_string[45]);
      Assert.AreEqual<byte>((byte)0, token.token_string[46]);
      Assert.AreEqual<byte>((byte)0, token.token_string[47]);
      Assert.AreEqual<byte>((byte)0, token.token_string[48]);
      Assert.AreEqual<byte>((byte)0, token.token_string[49]);
      Assert.AreEqual<byte>((byte)0, token.token_string[50]);
      Assert.AreEqual<byte>((byte)0, token.token_string[51]);
      Assert.AreEqual<byte>((byte)0, token.token_string[52]);
      Assert.AreEqual<byte>((byte)0, token.token_string[53]);
      Assert.AreEqual<byte>((byte)0, token.token_string[54]);
      Assert.AreEqual<byte>((byte)0, token.token_string[55]);
      Assert.AreEqual<byte>((byte)0, token.token_string[56]);
      Assert.AreEqual<byte>((byte)0, token.token_string[57]);
      Assert.AreEqual<byte>((byte)0, token.token_string[58]);
      Assert.AreEqual<byte>((byte)0, token.token_string[59]);
      Assert.AreEqual<byte>((byte)0, token.token_string[60]);
      Assert.AreEqual<byte>((byte)0, token.token_string[61]);
      Assert.AreEqual<byte>((byte)0, token.token_string[62]);
      Assert.AreEqual<byte>((byte)0, token.token_string[63]);
      Assert.AreEqual<byte>((byte)0, token.token_string[64]);
      Assert.AreEqual<byte>((byte)0, token.token_string[65]);
      Assert.AreEqual<byte>((byte)0, token.token_string[66]);
      Assert.AreEqual<byte>((byte)0, token.token_string[67]);
      Assert.AreEqual<byte>((byte)0, token.token_string[68]);
      Assert.AreEqual<byte>((byte)0, token.token_string[69]);
      Assert.AreEqual<byte>((byte)0, token.token_string[70]);
      Assert.AreEqual<byte>((byte)0, token.token_string[71]);
      Assert.AreEqual<byte>((byte)0, token.token_string[72]);
      Assert.AreEqual<byte>((byte)0, token.token_string[73]);
      Assert.AreEqual<byte>((byte)0, token.token_string[74]);
      Assert.AreEqual<byte>((byte)0, token.token_string[75]);
      Assert.AreEqual<byte>((byte)0, token.token_string[76]);
      Assert.AreEqual<byte>((byte)0, token.token_string[77]);
      Assert.AreEqual<byte>((byte)0, token.token_string[78]);
      Assert.AreEqual<byte>((byte)0, token.token_string[79]);
      Assert.AreEqual<int>(-1, token.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void get_token85()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      byte[] bs = new byte[16];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[16];
      bs1[0] = (byte)10;
      bs1[1] = (byte)11;
      bs1[2] = (byte)1;
      bs1[3] = (byte)1;
      bs1[4] = (byte)1;
      bs1[5] = (byte)1;
      bs1[6] = (byte)1;
      bs1[7] = (byte)1;
      bs1[8] = (byte)1;
      bs1[9] = (byte)1;
      bs1[10] = (byte)1;
      bs1[11] = (byte)1;
      bs1[12] = (byte)1;
      bs1[13] = (byte)1;
      bs1[14] = (byte)1;
      bs1[15] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 0;
      characterStream.stream = bs1;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token = this.get_token(s0);
      disposables.Dispose();
      Assert.IsNotNull((object)token);
      Assert.IsNotNull((object)(token.token_string));
      Assert.AreEqual<int>(80, token.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token.token_string[0]);
      Assert.AreEqual<byte>((byte)11, token.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token.token_string[4]);
      Assert.AreEqual<byte>((byte)0, token.token_string[5]);
      Assert.AreEqual<byte>((byte)0, token.token_string[6]);
      Assert.AreEqual<byte>((byte)0, token.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token.token_string[8]);
      Assert.AreEqual<byte>((byte)0, token.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token.token_string[33]);
      Assert.AreEqual<byte>((byte)0, token.token_string[34]);
      Assert.AreEqual<byte>((byte)0, token.token_string[35]);
      Assert.AreEqual<byte>((byte)0, token.token_string[36]);
      Assert.AreEqual<byte>((byte)0, token.token_string[37]);
      Assert.AreEqual<byte>((byte)0, token.token_string[38]);
      Assert.AreEqual<byte>((byte)0, token.token_string[39]);
      Assert.AreEqual<byte>((byte)0, token.token_string[40]);
      Assert.AreEqual<byte>((byte)0, token.token_string[41]);
      Assert.AreEqual<byte>((byte)0, token.token_string[42]);
      Assert.AreEqual<byte>((byte)0, token.token_string[43]);
      Assert.AreEqual<byte>((byte)0, token.token_string[44]);
      Assert.AreEqual<byte>((byte)0, token.token_string[45]);
      Assert.AreEqual<byte>((byte)0, token.token_string[46]);
      Assert.AreEqual<byte>((byte)0, token.token_string[47]);
      Assert.AreEqual<byte>((byte)0, token.token_string[48]);
      Assert.AreEqual<byte>((byte)0, token.token_string[49]);
      Assert.AreEqual<byte>((byte)0, token.token_string[50]);
      Assert.AreEqual<byte>((byte)0, token.token_string[51]);
      Assert.AreEqual<byte>((byte)0, token.token_string[52]);
      Assert.AreEqual<byte>((byte)0, token.token_string[53]);
      Assert.AreEqual<byte>((byte)0, token.token_string[54]);
      Assert.AreEqual<byte>((byte)0, token.token_string[55]);
      Assert.AreEqual<byte>((byte)0, token.token_string[56]);
      Assert.AreEqual<byte>((byte)0, token.token_string[57]);
      Assert.AreEqual<byte>((byte)0, token.token_string[58]);
      Assert.AreEqual<byte>((byte)0, token.token_string[59]);
      Assert.AreEqual<byte>((byte)0, token.token_string[60]);
      Assert.AreEqual<byte>((byte)0, token.token_string[61]);
      Assert.AreEqual<byte>((byte)0, token.token_string[62]);
      Assert.AreEqual<byte>((byte)0, token.token_string[63]);
      Assert.AreEqual<byte>((byte)0, token.token_string[64]);
      Assert.AreEqual<byte>((byte)0, token.token_string[65]);
      Assert.AreEqual<byte>((byte)0, token.token_string[66]);
      Assert.AreEqual<byte>((byte)0, token.token_string[67]);
      Assert.AreEqual<byte>((byte)0, token.token_string[68]);
      Assert.AreEqual<byte>((byte)0, token.token_string[69]);
      Assert.AreEqual<byte>((byte)0, token.token_string[70]);
      Assert.AreEqual<byte>((byte)0, token.token_string[71]);
      Assert.AreEqual<byte>((byte)0, token.token_string[72]);
      Assert.AreEqual<byte>((byte)0, token.token_string[73]);
      Assert.AreEqual<byte>((byte)0, token.token_string[74]);
      Assert.AreEqual<byte>((byte)0, token.token_string[75]);
      Assert.AreEqual<byte>((byte)0, token.token_string[76]);
      Assert.AreEqual<byte>((byte)0, token.token_string[77]);
      Assert.AreEqual<byte>((byte)0, token.token_string[78]);
      Assert.AreEqual<byte>((byte)0, token.token_string[79]);
      Assert.AreEqual<int>(-1, token.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void get_tokenThrowsIndexOutOfRangeException991()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      byte[] bs = new byte[0];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[80];
      bs1[0] = (byte)32;
      bs1[1] = (byte)127;
      bs1[2] = (byte)127;
      bs1[3] = (byte)127;
      bs1[4] = (byte)127;
      bs1[5] = (byte)127;
      bs1[6] = (byte)127;
      bs1[7] = (byte)127;
      bs1[8] = (byte)127;
      bs1[9] = (byte)127;
      bs1[10] = (byte)127;
      bs1[11] = (byte)127;
      bs1[12] = (byte)127;
      bs1[13] = (byte)127;
      bs1[14] = (byte)127;
      bs1[15] = (byte)127;
      bs1[16] = (byte)127;
      bs1[17] = (byte)127;
      bs1[18] = (byte)127;
      bs1[19] = (byte)127;
      bs1[20] = (byte)127;
      bs1[21] = (byte)127;
      bs1[22] = (byte)127;
      bs1[23] = (byte)127;
      bs1[24] = (byte)127;
      bs1[25] = (byte)127;
      bs1[26] = (byte)127;
      bs1[27] = (byte)127;
      bs1[28] = (byte)127;
      bs1[29] = (byte)127;
      bs1[30] = (byte)127;
      bs1[31] = (byte)127;
      bs1[32] = (byte)127;
      bs1[33] = (byte)127;
      bs1[34] = (byte)127;
      bs1[35] = (byte)127;
      bs1[36] = (byte)127;
      bs1[37] = (byte)127;
      bs1[38] = (byte)127;
      bs1[39] = (byte)127;
      bs1[40] = (byte)127;
      bs1[41] = (byte)127;
      bs1[42] = (byte)127;
      bs1[43] = (byte)127;
      bs1[44] = (byte)127;
      bs1[45] = (byte)127;
      bs1[46] = (byte)127;
      bs1[47] = (byte)127;
      bs1[48] = (byte)127;
      bs1[49] = (byte)127;
      bs1[50] = (byte)127;
      bs1[51] = (byte)127;
      bs1[52] = (byte)127;
      bs1[53] = (byte)127;
      bs1[54] = (byte)127;
      bs1[55] = (byte)127;
      bs1[56] = (byte)127;
      bs1[57] = (byte)127;
      bs1[58] = (byte)127;
      bs1[59] = (byte)127;
      bs1[60] = (byte)127;
      bs1[61] = (byte)127;
      bs1[62] = (byte)127;
      bs1[63] = (byte)127;
      bs1[65] = (byte)127;
      bs1[66] = (byte)127;
      bs1[67] = (byte)127;
      bs1[68] = (byte)127;
      bs1[69] = (byte)127;
      bs1[70] = (byte)127;
      bs1[71] = (byte)127;
      bs1[72] = (byte)127;
      bs1[73] = (byte)127;
      bs1[74] = (byte)127;
      bs1[75] = (byte)127;
      bs1[76] = (byte)127;
      bs1[77] = (byte)127;
      bs1[78] = (byte)127;
      bs1[79] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 64;
      characterStream.stream = bs1;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token = this.get_token(s0);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void get_token486()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      byte[] bs = new byte[12];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[12];
      bs1[0] = (byte)76;
      bs1[1] = (byte)10;
      bs1[2] = (byte)10;
      bs1[3] = (byte)76;
      bs1[4] = (byte)76;
      bs1[5] = (byte)76;
      bs1[6] = (byte)76;
      bs1[7] = (byte)76;
      bs1[8] = (byte)76;
      bs1[9] = (byte)76;
      bs1[10] = (byte)76;
      bs1[11] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token = this.get_token(s0);
      disposables.Dispose();
      Assert.IsNotNull((object)token);
      Assert.IsNotNull((object)(token.token_string));
      Assert.AreEqual<int>(80, token.token_string.Length);
      Assert.AreEqual<byte>((byte)76, token.token_string[0]);
      Assert.AreEqual<byte>((byte)76, token.token_string[1]);
      Assert.AreEqual<byte>((byte)76, token.token_string[2]);
      Assert.AreEqual<byte>((byte)76, token.token_string[3]);
      Assert.AreEqual<byte>((byte)76, token.token_string[4]);
      Assert.AreEqual<byte>((byte)76, token.token_string[5]);
      Assert.AreEqual<byte>((byte)76, token.token_string[6]);
      Assert.AreEqual<byte>((byte)76, token.token_string[7]);
      Assert.AreEqual<byte>((byte)0, token.token_string[8]);
      Assert.AreEqual<byte>((byte)76, token.token_string[9]);
      Assert.AreEqual<byte>((byte)0, token.token_string[10]);
      Assert.AreEqual<byte>((byte)0, token.token_string[11]);
      Assert.AreEqual<byte>((byte)0, token.token_string[12]);
      Assert.AreEqual<byte>((byte)0, token.token_string[13]);
      Assert.AreEqual<byte>((byte)0, token.token_string[14]);
      Assert.AreEqual<byte>((byte)0, token.token_string[15]);
      Assert.AreEqual<byte>((byte)0, token.token_string[16]);
      Assert.AreEqual<byte>((byte)0, token.token_string[17]);
      Assert.AreEqual<byte>((byte)0, token.token_string[18]);
      Assert.AreEqual<byte>((byte)0, token.token_string[19]);
      Assert.AreEqual<byte>((byte)0, token.token_string[20]);
      Assert.AreEqual<byte>((byte)0, token.token_string[21]);
      Assert.AreEqual<byte>((byte)0, token.token_string[22]);
      Assert.AreEqual<byte>((byte)0, token.token_string[23]);
      Assert.AreEqual<byte>((byte)0, token.token_string[24]);
      Assert.AreEqual<byte>((byte)0, token.token_string[25]);
      Assert.AreEqual<byte>((byte)0, token.token_string[26]);
      Assert.AreEqual<byte>((byte)0, token.token_string[27]);
      Assert.AreEqual<byte>((byte)0, token.token_string[28]);
      Assert.AreEqual<byte>((byte)0, token.token_string[29]);
      Assert.AreEqual<byte>((byte)0, token.token_string[30]);
      Assert.AreEqual<byte>((byte)0, token.token_string[31]);
      Assert.AreEqual<byte>((byte)0, token.token_string[32]);
      Assert.AreEqual<byte>((byte)0, token.token_string[33]);
      Assert.AreEqual<byte>((byte)0, token.token_string[34]);
      Assert.AreEqual<byte>((byte)0, token.token_string[35]);
      Assert.AreEqual<byte>((byte)0, token.token_string[36]);
      Assert.AreEqual<byte>((byte)0, token.token_string[37]);
      Assert.AreEqual<byte>((byte)0, token.token_string[38]);
      Assert.AreEqual<byte>((byte)0, token.token_string[39]);
      Assert.AreEqual<byte>((byte)0, token.token_string[40]);
      Assert.AreEqual<byte>((byte)0, token.token_string[41]);
      Assert.AreEqual<byte>((byte)0, token.token_string[42]);
      Assert.AreEqual<byte>((byte)0, token.token_string[43]);
      Assert.AreEqual<byte>((byte)0, token.token_string[44]);
      Assert.AreEqual<byte>((byte)0, token.token_string[45]);
      Assert.AreEqual<byte>((byte)0, token.token_string[46]);
      Assert.AreEqual<byte>((byte)0, token.token_string[47]);
      Assert.AreEqual<byte>((byte)0, token.token_string[48]);
      Assert.AreEqual<byte>((byte)0, token.token_string[49]);
      Assert.AreEqual<byte>((byte)0, token.token_string[50]);
      Assert.AreEqual<byte>((byte)0, token.token_string[51]);
      Assert.AreEqual<byte>((byte)0, token.token_string[52]);
      Assert.AreEqual<byte>((byte)0, token.token_string[53]);
      Assert.AreEqual<byte>((byte)0, token.token_string[54]);
      Assert.AreEqual<byte>((byte)0, token.token_string[55]);
      Assert.AreEqual<byte>((byte)0, token.token_string[56]);
      Assert.AreEqual<byte>((byte)0, token.token_string[57]);
      Assert.AreEqual<byte>((byte)0, token.token_string[58]);
      Assert.AreEqual<byte>((byte)0, token.token_string[59]);
      Assert.AreEqual<byte>((byte)0, token.token_string[60]);
      Assert.AreEqual<byte>((byte)0, token.token_string[61]);
      Assert.AreEqual<byte>((byte)0, token.token_string[62]);
      Assert.AreEqual<byte>((byte)0, token.token_string[63]);
      Assert.AreEqual<byte>((byte)0, token.token_string[64]);
      Assert.AreEqual<byte>((byte)0, token.token_string[65]);
      Assert.AreEqual<byte>((byte)0, token.token_string[66]);
      Assert.AreEqual<byte>((byte)0, token.token_string[67]);
      Assert.AreEqual<byte>((byte)0, token.token_string[68]);
      Assert.AreEqual<byte>((byte)0, token.token_string[69]);
      Assert.AreEqual<byte>((byte)0, token.token_string[70]);
      Assert.AreEqual<byte>((byte)0, token.token_string[71]);
      Assert.AreEqual<byte>((byte)0, token.token_string[72]);
      Assert.AreEqual<byte>((byte)0, token.token_string[73]);
      Assert.AreEqual<byte>((byte)0, token.token_string[74]);
      Assert.AreEqual<byte>((byte)0, token.token_string[75]);
      Assert.AreEqual<byte>((byte)0, token.token_string[76]);
      Assert.AreEqual<byte>((byte)0, token.token_string[77]);
      Assert.AreEqual<byte>((byte)0, token.token_string[78]);
      Assert.AreEqual<byte>((byte)0, token.token_string[79]);
      Assert.AreEqual<int>(17, token.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void get_token334()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      byte[] bs = new byte[2];
      bs[0] = (byte)32;
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[86];
      bs1[1] = (byte)127;
      bs1[2] = (byte)127;
      bs1[3] = (byte)127;
      bs1[4] = (byte)127;
      bs1[5] = (byte)127;
      bs1[6] = (byte)127;
      bs1[7] = (byte)127;
      bs1[8] = (byte)127;
      bs1[9] = (byte)127;
      bs1[10] = (byte)127;
      bs1[11] = (byte)127;
      bs1[12] = (byte)127;
      bs1[13] = (byte)127;
      bs1[14] = (byte)127;
      bs1[15] = (byte)127;
      bs1[16] = (byte)127;
      bs1[17] = (byte)127;
      bs1[18] = (byte)127;
      bs1[19] = (byte)127;
      bs1[20] = (byte)127;
      bs1[21] = (byte)127;
      bs1[22] = (byte)127;
      bs1[23] = (byte)127;
      bs1[24] = (byte)127;
      bs1[25] = (byte)127;
      bs1[26] = (byte)127;
      bs1[27] = (byte)127;
      bs1[28] = (byte)127;
      bs1[29] = (byte)127;
      bs1[30] = (byte)127;
      bs1[31] = (byte)127;
      bs1[32] = (byte)127;
      bs1[33] = (byte)127;
      bs1[34] = (byte)127;
      bs1[35] = (byte)127;
      bs1[36] = (byte)127;
      bs1[37] = (byte)127;
      bs1[38] = (byte)127;
      bs1[39] = (byte)127;
      bs1[40] = (byte)127;
      bs1[41] = (byte)127;
      bs1[42] = (byte)127;
      bs1[43] = (byte)127;
      bs1[44] = (byte)127;
      bs1[45] = (byte)127;
      bs1[46] = (byte)127;
      bs1[47] = (byte)127;
      bs1[48] = (byte)127;
      bs1[49] = (byte)127;
      bs1[50] = (byte)127;
      bs1[51] = (byte)127;
      bs1[52] = (byte)127;
      bs1[53] = (byte)127;
      bs1[54] = (byte)127;
      bs1[55] = (byte)127;
      bs1[56] = (byte)127;
      bs1[57] = (byte)127;
      bs1[58] = (byte)127;
      bs1[59] = (byte)127;
      bs1[60] = (byte)127;
      bs1[61] = (byte)127;
      bs1[62] = (byte)127;
      bs1[63] = (byte)127;
      bs1[64] = (byte)127;
      bs1[65] = (byte)127;
      bs1[66] = (byte)127;
      bs1[67] = (byte)127;
      bs1[68] = (byte)127;
      bs1[69] = (byte)127;
      bs1[70] = (byte)127;
      bs1[71] = (byte)127;
      bs1[72] = (byte)127;
      bs1[73] = (byte)127;
      bs1[74] = (byte)127;
      bs1[75] = (byte)127;
      bs1[76] = (byte)127;
      bs1[77] = (byte)127;
      bs1[78] = (byte)127;
      bs1[79] = (byte)127;
      bs1[80] = (byte)127;
      bs1[81] = (byte)127;
      bs1[82] = (byte)127;
      bs1[83] = (byte)127;
      bs1[84] = (byte)127;
      bs1[85] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 0;
      characterStream.stream = bs1;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      token = this.get_token(s0);
      disposables.Dispose();
    }
}
    }
}
