// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Edu.Unl.Sir.Siemens.PrintTokens.Orig
{
    public partial class OriginalTest
    {
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special737()
{
    int i;
    i = this.special(0);
    Assert.AreEqual<int>(-1, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special983()
{
    int i;
    i = this.special(24);
    Assert.AreEqual<int>(24, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special942()
{
    int i;
    i = this.special(32);
    Assert.AreEqual<int>(32, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special903()
{
    int i;
    i = this.special(19);
    Assert.AreEqual<int>(19, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special954()
{
    int i;
    i = this.special(25);
    Assert.AreEqual<int>(25, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special73701()
{
    int i;
    i = this.special(20);
    Assert.AreEqual<int>(20, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special377()
{
    int i;
    i = this.special(28);
    Assert.AreEqual<int>(-1, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special10()
{
    int i;
    i = this.special(21);
    Assert.AreEqual<int>(21, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special603()
{
    int i;
    i = this.special(29);
    Assert.AreEqual<int>(-1, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special808()
{
    int i;
    i = this.special(26);
    Assert.AreEqual<int>(-1, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special611()
{
    int i;
    i = this.special(22);
    Assert.AreEqual<int>(22, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special102()
{
    int i;
    i = this.special(23);
    Assert.AreEqual<int>(23, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special437()
{
    int i;
    i = this.special(30);
    Assert.AreEqual<int>(-1, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special105()
{
    int i;
    i = this.special(27);
    Assert.AreEqual<int>(-1, i);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void special156()
{
    int i;
    i = this.special(31);
    Assert.AreEqual<int>(-1, i);
}
    }
}
