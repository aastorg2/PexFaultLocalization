// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System.IO;

namespace Edu.Unl.Sir.Siemens.PrintTokens.Orig
{
    public partial class OriginalTest
    {
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void error_or_eof_caseThrowsNullReferenceException611()
{
    Token token;
    token = this.error_or_eof_case
                ((TokenStream)null, (Token)null, 0, (byte[])null, 0, (byte)0);
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void error_or_eof_case237()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[3];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[3];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 2;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[3];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[3];
      token1 = this.error_or_eof_case(s0, token, 0, bs3, 2, (byte)0);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(3, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void error_or_eof_case982()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[3];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[2];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[3];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[3];
      bs3[0] = (byte)9;
      bs3[1] = (byte)137;
      token1 = this.error_or_eof_case(s0, token, 0, bs3, 2, (byte)0);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(3, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)137, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void error_or_eof_case809()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[5];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[4];
      bs1[0] = (byte)127;
      bs1[1] = (byte)127;
      bs1[2] = (byte)127;
      bs1[3] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[5];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[5];
      token1 = this.error_or_eof_case(s0, token, 0, bs3, 4, (byte)0);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(5, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[3]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[4]);
      Assert.AreEqual<int>(0, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void error_or_eof_case233()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[3];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[3];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 2;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[3];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[3];
      token1 = this.error_or_eof_case(s0, token, 1, bs3, 2, (byte)0);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(3, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void error_or_eof_case993()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[3];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[2];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[3];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[3];
      bs3[1] = (byte)9;
      token1 = this.error_or_eof_case(s0, token, 0, bs3, 2, (byte)0);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(3, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void error_or_eof_case210()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[4];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[8];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[4];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[4];
      bs3[0] = (byte)9;
      token1 = this.error_or_eof_case(s0, token, 1, bs3, 2, (byte)0);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(4, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[3]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void error_or_eof_case633()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[4];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[3];
      bs1[0] = (byte)127;
      bs1[2] = (byte)127;
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 2;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[4];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[4];
      bs3[0] = (byte)9;
      bs3[1] = (byte)9;
      bs3[2] = (byte)137;
      bs3[3] = (byte)127;
      token1 = this.error_or_eof_case(s0, token, 0, bs3, 3, (byte)0);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(4, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)137, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)137, token1.token_string[2]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[3]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void error_or_eof_case286()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[3];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[2];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 1;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[3];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[3];
      bs3[0] = (byte)9;
      bs3[1] = (byte)9;
      token1 = this.error_or_eof_case(s0, token, 0, bs3, 2, (byte)0);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(3, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)9, token1.token_string[1]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[2]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OriginalTest))]
public void error_or_eof_case780()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      CharacterStream characterStream;
      Token token;
      Token token1;
      byte[] bs = new byte[3];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      byte[] bs1 = new byte[3];
      characterStream = new CharacterStream();
      characterStream.fp = (Stream)memoryStream;
      characterStream.stream_ind = 2;
      characterStream.stream = bs1;
      byte[] bs2 = new byte[2];
      token = new Token();
      token.token_string = bs2;
      token.token_id = 0;
      TokenStream s0 = new TokenStream();
      s0.ch_stream = characterStream;
      byte[] bs3 = new byte[2];
      token1 = this.error_or_eof_case(s0, token, 0, bs3, 1, (byte)0);
      disposables.Dispose();
      Assert.IsNotNull((object)token1);
      Assert.IsNotNull((object)(token1.token_string));
      Assert.AreEqual<int>(2, token1.token_string.Length);
      Assert.AreEqual<byte>((byte)0, token1.token_string[0]);
      Assert.AreEqual<byte>((byte)0, token1.token_string[1]);
      Assert.AreEqual<int>(-1, token1.token_id);
    }
}
    }
}
