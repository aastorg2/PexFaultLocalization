// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.IO;
using System.IO.Moles;

namespace Edu.Nlu.Sir.Siemens.Replace
{
    public partial class BaseVersionTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getline905()
{
    using (PexPConsoleInContext.Create())
    {
      bool b;
      string s = (string)null;
      b = this.getline(out s, 0);
      Assert.AreEqual<bool>(true, b);
      Assert.AreEqual<string>("0", s);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getline729()
{
    using (PexPConsoleInContext.Create())
    {
      bool b;
      string s = (string)null;
      b = this.getline(out s, 1);
      Assert.AreEqual<bool>(true, b);
      Assert.AreEqual<string>("00", s);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getline503()
{
    using (PexPConsoleInContext.Create())
    {
      bool b;
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      choices.DefaultSession
          .At(0, "peeked", (object)(PexSafeHelpers.ByteToBoolean((byte)2)));
      string s = (string)null;
      b = this.getline(out s, 2);
      Assert.AreEqual<bool>(true, b);
      Assert.AreEqual<string>("000", s);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[ExpectedException(typeof(IOException))]
public void getlineThrowsIOException451()
{
    using (PexPConsoleInContext.Create())
    {
      IOException iOException;
      bool b;
      iOException = new IOException();
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      choices.NextSegment(1).DefaultSession
          .At(1, "throw", (object)iOException);
      string s = (string)null;
      b = this.getline(out s, 0);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(SIOException))]
public void getlineThrowsSIOException836()
{
    using (PexPConsoleInContext.Create())
    {
      SIOException sIOException;
      bool b;
      sIOException = new SIOException();
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      choices.NextSegment(1).DefaultSession
          .At(1, "throw", (object)sIOException);
      string s = (string)null;
      b = this.getline(out s, 0);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(SIOException))]
public void getlineThrowsSIOException179()
{
    using (PexPConsoleInContext.Create())
    {
      SIOException sIOException;
      bool b;
      sIOException = new SIOException();
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      choices.NextSegment(1).DefaultSession
          .At(0, "peeked", (object)true)
          .At(2, "throw", (object)sIOException)
          .At(1, "peek", (object)' ');
      string s = (string)null;
      b = this.getline(out s, 0);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(SIOException))]
public void getlineThrowsSIOException118()
{
    using (PexPConsoleInContext.Create())
    {
      SIOException sIOException;
      bool b;
      sIOException = new SIOException();
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      choices.NextSegment(1).DefaultSession
          .At(2, "lastPeek", (object)' ')
          .At(4, "throw", (object)sIOException);
      string s = (string)null;
      b = this.getline(out s, 1);
    }
}
    }
}
