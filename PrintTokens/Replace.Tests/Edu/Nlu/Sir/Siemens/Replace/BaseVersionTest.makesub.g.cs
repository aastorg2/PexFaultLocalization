// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Edu.Nlu.Sir.Siemens.Replace
{
    public partial class BaseVersionTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void makesubThrowsNullReferenceException141()
{
    int i;
    string s = (string)null;
    i = this.makesub((string)null, 0, '@', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException139()
{
    int i;
    string s = (string)null;
    i = this.makesub("", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub691()
{
    int i;
    string s = (string)null;
    i = this.makesub("\0", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException205()
{
    int i;
    string s = (string)null;
    i = this.makesub("!", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub215()
{
    int i;
    string s = (string)null;
    i = this.makesub(" ", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException57()
{
    int i;
    string s = (string)null;
    i = this.makesub("&", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException145()
{
    int i;
    string s = (string)null;
    i = this.makesub("@", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException378()
{
    int i;
    string s = (string)null;
    i = this.makesub("@@", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException739()
{
    int i;
    string s = (string)null;
    i = this.makesub("@t", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub265()
{
    int i;
    string s = (string)null;
    i = this.makesub("@\0", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("@", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException813()
{
    int i;
    string s = (string)null;
    i = this.makesub("@n", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException737()
{
    int i;
    string s = (string)null;
    i = this.makesub("&&", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException275()
{
    int i;
    string s = (string)null;
    i = this.makesub("!!", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException269()
{
    int i;
    string s = (string)null;
    i = this.makesub("\0&!&!", 1, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException449()
{
    int i;
    string s = (string)null;
    i = this.makesub("@@n!@", 1, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException911()
{
    int i;
    string s = (string)null;
    i = this.makesub("@n!@\u0001", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException712()
{
    int i;
    string s = (string)null;
    i = this.makesub("@n!@n", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException486()
{
    int i;
    string s = (string)null;
    i = this.makesub("!&@\u0001&@&", 0, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException128()
{
    int i;
    string s = (string)null;
    i = this.makesub("t@t@t", 1, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub927()
{
    int i;
    string s = (string)null;
    i = this.makesub("@\u1000@\0@", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("\u1000@", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub629()
{
    int i;
    string s = (string)null;
    i = this.makesub("@n\0", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("\n", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub459()
{
    int i;
    string s = (string)null;
    i = this.makesub("\0@\0", 1, '@', out s);
    Assert.AreEqual<int>(1, i);
    Assert.AreEqual<string>("\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub708()
{
    int i;
    string s = (string)null;
    i = this.makesub("@t\0", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("\t", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub744()
{
    int i;
    string s = (string)null;
    i = this.makesub("@\u0001@\u0002\0", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("\u0001\u0002", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException777()
{
    int i;
    string s = (string)null;
    i = this.makesub("\0&&", 1, ' ', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void makesubThrowsIndexOutOfRangeException832()
{
    int i;
    string s = (string)null;
    i = this.makesub("@\0@@\u0001&\u0001 @\u0001@\u0001@\u0001@\u0400@\u1000@\u0400@\u0010@t@t", 3, '!', out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub77()
{
    int i;
    string s = (string)null;
    i = this.makesub("@\u2000&@n@t@n@@@@\0", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("\u2000\uffff\n\t\n@@", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub174()
{
    int i;
    string s = (string)null;
    i = this.makesub("\u0001\0", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("\u0001", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub996()
{
    int i;
    string s = (string)null;
    i = this.makesub(" \0", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub483()
{
    int i;
    string s = (string)null;
    i = this.makesub("&&\0&&&&", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("\uffff\uffff", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub508()
{
    int i;
    string s = (string)null;
    i = this.makesub("\u0001\u0001\0", 0, ' ', out s);
    Assert.AreEqual<int>(0, i);
    Assert.AreEqual<string>("\u0001\u0001", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void makesub683()
{
    int i;
    string s = (string)null;
    i = this.makesub("@\u0002&@n@t@n@t @\0", 0, ' ', out s);
    Assert.AreEqual<int>(11, i);
    Assert.AreEqual<string>("\u0002\uffff\n\t\n\t\0", s);
}
    }
}
