// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Edu.Nlu.Sir.Siemens.Replace
{
    public partial class BaseVersionTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void addstr411()
{
    bool b;
    string s = (string)null;
    int i = 0;
    b = this.addstr(' ', ref s, ref i, 0);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<string>((string)null, s);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void addstrThrowsNullReferenceException338()
{
    bool b;
    string s = (string)null;
    int i = int.MinValue;
    b = this.addstr(' ', ref s, ref i, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(ArgumentOutOfRangeException))]
public void addstrThrowsArgumentOutOfRangeException398()
{
    bool b;
    string s = "";
    int i = int.MinValue;
    b = this.addstr('\0', ref s, ref i, -2147483647);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void addstr895()
{
    bool b;
    string s = "";
    int i = 0;
    b = this.addstr(' ', ref s, ref i, 0);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<string>("", s);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(ArgumentOutOfRangeException))]
public void addstrThrowsArgumentOutOfRangeException470()
{
    bool b;
    string s = "";
    int i = int.MinValue;
    b = this.addstr(' ', ref s, ref i, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[ExpectedException(typeof(ArgumentException))]
public void addstrThrowsArgumentException777()
{
    bool b;
    string s = "";
    int i = 0;
    b = this.addstr(' ', ref s, ref i, 1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void addstr927()
{
    bool b;
    string s = "";
    int i = 0;
    b = this.addstr(' ', ref s, ref i, 1);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>(" ", s);
    Assert.AreEqual<int>(1, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(ArgumentOutOfRangeException))]
public void addstrThrowsArgumentOutOfRangeException265()
{
    bool b;
    string s = "";
    int i = 1;
    b = this.addstr(' ', ref s, ref i, 2);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void addstr416()
{
    bool b;
    string s = "\0\0\0";
    int i = 1;
    b = this.addstr(' ', ref s, ref i, 2);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\0 \0", s);
    Assert.AreEqual<int>(2, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void addstr546()
{
    bool b;
    string s = "\0";
    int i = 0;
    b = this.addstr(' ', ref s, ref i, 0);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<string>("\0", s);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void addstr954()
{
    bool b;
    string s = "\0";
    int i = 0;
    b = this.addstr(' ', ref s, ref i, 1);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>(" ", s);
    Assert.AreEqual<int>(1, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void addstr790()
{
    bool b;
    string s = "\0\0";
    int i = 0;
    b = this.addstr(' ', ref s, ref i, 1);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>(" \0", s);
    Assert.AreEqual<int>(1, i);
}
    }
}
