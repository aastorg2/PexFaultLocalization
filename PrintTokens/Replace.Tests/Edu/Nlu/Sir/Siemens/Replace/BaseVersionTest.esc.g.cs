// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Edu.Nlu.Sir.Siemens.Replace
{
    public partial class BaseVersionTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void esc474()
{
    char c;
    int i = 0;
    c = this.esc("\0\0", ref i);
    Assert.AreEqual<char>('\0', c);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void esc661()
{
    char c;
    int i = 0;
    c = this.esc("@\0", ref i);
    Assert.AreEqual<char>('@', c);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void esc133()
{
    char c;
    int i = 0;
    c = this.esc("@\u0001", ref i);
    Assert.AreEqual<char>('\u0001', c);
    Assert.AreEqual<int>(1, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void esc917()
{
    char c;
    int i = 0;
    c = this.esc("@t", ref i);
    Assert.AreEqual<char>('\t', c);
    Assert.AreEqual<int>(1, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void esc967()
{
    char c;
    int i = 0;
    c = this.esc("@n", ref i);
    Assert.AreEqual<char>('\n', c);
    Assert.AreEqual<int>(1, i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void escThrowsIndexOutOfRangeException98()
{
    char c;
    int i = 2;
    c = this.esc("\0\0", ref i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void escThrowsIndexOutOfRangeException821()
{
    char c;
    int i = 2;
    c = this.esc("@\u0001", ref i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void escThrowsIndexOutOfRangeException768()
{
    char c;
    int i = int.MinValue;
    c = this.esc("", ref i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void escThrowsIndexOutOfRangeException213()
{
    char c;
    int i = 0;
    c = this.esc("@", ref i);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void escThrowsIndexOutOfRangeException791()
{
    char c;
    int i = int.MaxValue;
    c = this.esc("", ref i);
}
    }
}
