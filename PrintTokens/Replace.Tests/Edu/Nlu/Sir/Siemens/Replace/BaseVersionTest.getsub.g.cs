// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Edu.Nlu.Sir.Siemens.Replace
{
    public partial class BaseVersionTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub611()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(false, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('\0', cs1[0]);
    Assert.AreEqual<char>('\0', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub294()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '!';
    cs[1] = ' ';
    cs[2] = ' ';
    cs[3] = ' ';
    cs[4] = ' ';
    cs[6] = ' ';
    cs[7] = ' ';
    cs[8] = ' ';
    cs[9] = ' ';
    cs[10] = ' ';
    cs[11] = ' ';
    cs[12] = ' ';
    cs[13] = ' ';
    cs[14] = ' ';
    cs[15] = ' ';
    cs[16] = ' ';
    cs[17] = ' ';
    cs[18] = ' ';
    cs[19] = ' ';
    cs[20] = ' ';
    cs[21] = ' ';
    cs[22] = ' ';
    cs[23] = ' ';
    cs[24] = ' ';
    cs[25] = ' ';
    cs[26] = ' ';
    cs[27] = ' ';
    cs[28] = ' ';
    cs[29] = ' ';
    cs[30] = ' ';
    cs[31] = ' ';
    cs[32] = ' ';
    cs[33] = ' ';
    cs[34] = ' ';
    cs[35] = ' ';
    cs[36] = ' ';
    cs[37] = ' ';
    cs[38] = ' ';
    cs[39] = ' ';
    cs[40] = ' ';
    cs[41] = ' ';
    cs[42] = ' ';
    cs[43] = ' ';
    cs[44] = ' ';
    cs[45] = ' ';
    cs[46] = ' ';
    cs[47] = ' ';
    cs[48] = ' ';
    cs[49] = ' ';
    cs[50] = ' ';
    cs[51] = ' ';
    cs[52] = ' ';
    cs[53] = ' ';
    cs[54] = ' ';
    cs[55] = ' ';
    cs[56] = ' ';
    cs[57] = ' ';
    cs[58] = ' ';
    cs[59] = ' ';
    cs[60] = ' ';
    cs[61] = ' ';
    cs[62] = ' ';
    cs[63] = ' ';
    cs[64] = ' ';
    cs[65] = ' ';
    cs[66] = ' ';
    cs[67] = ' ';
    cs[68] = ' ';
    cs[69] = ' ';
    cs[70] = ' ';
    cs[71] = ' ';
    cs[72] = ' ';
    cs[73] = ' ';
    cs[74] = ' ';
    cs[75] = ' ';
    cs[76] = ' ';
    cs[77] = ' ';
    cs[78] = ' ';
    cs[79] = ' ';
    cs[80] = ' ';
    cs[81] = ' ';
    cs[82] = ' ';
    cs[83] = ' ';
    cs[84] = ' ';
    cs[85] = ' ';
    cs[86] = ' ';
    cs[87] = ' ';
    cs[88] = ' ';
    cs[89] = ' ';
    cs[90] = ' ';
    cs[91] = ' ';
    cs[92] = ' ';
    cs[93] = ' ';
    cs[94] = ' ';
    cs[95] = ' ';
    cs[96] = ' ';
    cs[97] = ' ';
    cs[98] = ' ';
    cs[99] = ' ';
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('!', cs1[0]);
    Assert.AreEqual<char>(' ', cs1[1]);
    Assert.AreEqual<char>(' ', cs1[2]);
    Assert.AreEqual<char>(' ', cs1[3]);
    Assert.AreEqual<char>(' ', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub666()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '@';
    cs[1] = ' ';
    cs[2] = ' ';
    cs[3] = ' ';
    cs[4] = ' ';
    cs[5] = ' ';
    cs[6] = ' ';
    cs[8] = ' ';
    cs[9] = ' ';
    cs[10] = ' ';
    cs[11] = ' ';
    cs[12] = ' ';
    cs[13] = ' ';
    cs[14] = ' ';
    cs[15] = ' ';
    cs[16] = ' ';
    cs[17] = ' ';
    cs[18] = ' ';
    cs[19] = ' ';
    cs[20] = ' ';
    cs[21] = ' ';
    cs[22] = ' ';
    cs[23] = ' ';
    cs[24] = ' ';
    cs[25] = ' ';
    cs[26] = ' ';
    cs[27] = ' ';
    cs[28] = ' ';
    cs[29] = ' ';
    cs[30] = ' ';
    cs[31] = ' ';
    cs[32] = ' ';
    cs[33] = ' ';
    cs[34] = ' ';
    cs[35] = ' ';
    cs[36] = ' ';
    cs[37] = ' ';
    cs[38] = ' ';
    cs[39] = ' ';
    cs[40] = ' ';
    cs[41] = ' ';
    cs[42] = ' ';
    cs[43] = ' ';
    cs[44] = ' ';
    cs[45] = ' ';
    cs[46] = ' ';
    cs[47] = ' ';
    cs[48] = ' ';
    cs[49] = ' ';
    cs[50] = ' ';
    cs[51] = ' ';
    cs[52] = ' ';
    cs[53] = ' ';
    cs[54] = ' ';
    cs[55] = ' ';
    cs[56] = ' ';
    cs[57] = ' ';
    cs[58] = ' ';
    cs[59] = ' ';
    cs[60] = ' ';
    cs[61] = ' ';
    cs[62] = ' ';
    cs[63] = ' ';
    cs[64] = ' ';
    cs[65] = ' ';
    cs[66] = ' ';
    cs[67] = ' ';
    cs[68] = ' ';
    cs[69] = ' ';
    cs[70] = ' ';
    cs[71] = ' ';
    cs[72] = ' ';
    cs[73] = ' ';
    cs[74] = ' ';
    cs[75] = ' ';
    cs[76] = ' ';
    cs[77] = ' ';
    cs[78] = ' ';
    cs[79] = ' ';
    cs[80] = ' ';
    cs[81] = ' ';
    cs[82] = ' ';
    cs[83] = ' ';
    cs[84] = ' ';
    cs[85] = ' ';
    cs[86] = ' ';
    cs[87] = ' ';
    cs[88] = ' ';
    cs[89] = ' ';
    cs[90] = ' ';
    cs[91] = ' ';
    cs[92] = ' ';
    cs[93] = ' ';
    cs[94] = ' ';
    cs[95] = ' ';
    cs[96] = ' ';
    cs[97] = ' ';
    cs[98] = ' ';
    cs[99] = ' ';
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>(' ', cs1[0]);
    Assert.AreEqual<char>(' ', cs1[1]);
    Assert.AreEqual<char>(' ', cs1[2]);
    Assert.AreEqual<char>(' ', cs1[3]);
    Assert.AreEqual<char>(' ', cs1[4]);
    Assert.AreEqual<char>(' ', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub229()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '@';
    cs[1] = 'n';
    cs[2] = ' ';
    cs[3] = ' ';
    cs[4] = ' ';
    cs[5] = ' ';
    cs[6] = ' ';
    cs[7] = ' ';
    cs[9] = ' ';
    cs[10] = ' ';
    cs[11] = ' ';
    cs[12] = ' ';
    cs[13] = ' ';
    cs[14] = ' ';
    cs[15] = ' ';
    cs[16] = ' ';
    cs[17] = ' ';
    cs[18] = ' ';
    cs[19] = ' ';
    cs[20] = ' ';
    cs[21] = ' ';
    cs[22] = ' ';
    cs[23] = ' ';
    cs[24] = ' ';
    cs[25] = ' ';
    cs[26] = ' ';
    cs[27] = ' ';
    cs[28] = ' ';
    cs[29] = ' ';
    cs[30] = ' ';
    cs[31] = ' ';
    cs[32] = ' ';
    cs[33] = ' ';
    cs[34] = ' ';
    cs[35] = ' ';
    cs[36] = ' ';
    cs[37] = ' ';
    cs[38] = ' ';
    cs[39] = ' ';
    cs[40] = ' ';
    cs[41] = ' ';
    cs[42] = ' ';
    cs[43] = ' ';
    cs[44] = ' ';
    cs[45] = ' ';
    cs[46] = ' ';
    cs[47] = ' ';
    cs[48] = ' ';
    cs[49] = ' ';
    cs[50] = ' ';
    cs[51] = ' ';
    cs[52] = ' ';
    cs[53] = ' ';
    cs[54] = ' ';
    cs[55] = ' ';
    cs[56] = ' ';
    cs[57] = ' ';
    cs[58] = ' ';
    cs[59] = ' ';
    cs[60] = ' ';
    cs[61] = ' ';
    cs[62] = ' ';
    cs[63] = ' ';
    cs[64] = ' ';
    cs[65] = ' ';
    cs[66] = ' ';
    cs[67] = ' ';
    cs[68] = ' ';
    cs[69] = ' ';
    cs[70] = ' ';
    cs[71] = ' ';
    cs[72] = ' ';
    cs[73] = ' ';
    cs[74] = ' ';
    cs[75] = ' ';
    cs[76] = ' ';
    cs[77] = ' ';
    cs[78] = ' ';
    cs[79] = ' ';
    cs[80] = ' ';
    cs[81] = ' ';
    cs[82] = ' ';
    cs[83] = ' ';
    cs[84] = ' ';
    cs[85] = ' ';
    cs[86] = ' ';
    cs[87] = ' ';
    cs[88] = ' ';
    cs[89] = ' ';
    cs[90] = ' ';
    cs[91] = ' ';
    cs[92] = ' ';
    cs[93] = ' ';
    cs[94] = ' ';
    cs[95] = ' ';
    cs[96] = ' ';
    cs[97] = ' ';
    cs[98] = ' ';
    cs[99] = ' ';
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('\n', cs1[0]);
    Assert.AreEqual<char>(' ', cs1[1]);
    Assert.AreEqual<char>(' ', cs1[2]);
    Assert.AreEqual<char>(' ', cs1[3]);
    Assert.AreEqual<char>(' ', cs1[4]);
    Assert.AreEqual<char>(' ', cs1[5]);
    Assert.AreEqual<char>(' ', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub330()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '@';
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('@', cs1[0]);
    Assert.AreEqual<char>('\0', cs1[1]);
    Assert.AreEqual<char>('\0', cs1[2]);
    Assert.AreEqual<char>('\0', cs1[3]);
    Assert.AreEqual<char>('\0', cs1[4]);
    Assert.AreEqual<char>('\0', cs1[5]);
    Assert.AreEqual<char>('\0', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub400()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '&';
    cs[1] = ' ';
    cs[2] = ' ';
    cs[3] = ' ';
    cs[4] = ' ';
    cs[5] = ' ';
    cs[6] = ' ';
    cs[8] = ' ';
    cs[9] = ' ';
    cs[10] = ' ';
    cs[11] = ' ';
    cs[12] = ' ';
    cs[13] = ' ';
    cs[14] = ' ';
    cs[15] = ' ';
    cs[16] = ' ';
    cs[17] = ' ';
    cs[18] = ' ';
    cs[19] = ' ';
    cs[20] = ' ';
    cs[21] = ' ';
    cs[22] = ' ';
    cs[23] = ' ';
    cs[24] = ' ';
    cs[25] = ' ';
    cs[26] = ' ';
    cs[27] = ' ';
    cs[28] = ' ';
    cs[29] = ' ';
    cs[30] = ' ';
    cs[31] = ' ';
    cs[32] = ' ';
    cs[33] = ' ';
    cs[34] = ' ';
    cs[35] = ' ';
    cs[36] = ' ';
    cs[37] = ' ';
    cs[38] = ' ';
    cs[39] = ' ';
    cs[40] = ' ';
    cs[41] = ' ';
    cs[42] = ' ';
    cs[43] = ' ';
    cs[44] = ' ';
    cs[45] = ' ';
    cs[46] = ' ';
    cs[47] = ' ';
    cs[48] = ' ';
    cs[49] = ' ';
    cs[50] = ' ';
    cs[51] = ' ';
    cs[52] = ' ';
    cs[53] = ' ';
    cs[54] = ' ';
    cs[55] = ' ';
    cs[56] = ' ';
    cs[57] = ' ';
    cs[58] = ' ';
    cs[59] = ' ';
    cs[60] = ' ';
    cs[61] = ' ';
    cs[62] = ' ';
    cs[63] = ' ';
    cs[64] = ' ';
    cs[65] = ' ';
    cs[66] = ' ';
    cs[67] = ' ';
    cs[68] = ' ';
    cs[69] = ' ';
    cs[70] = ' ';
    cs[71] = ' ';
    cs[72] = ' ';
    cs[73] = ' ';
    cs[74] = ' ';
    cs[75] = ' ';
    cs[76] = ' ';
    cs[77] = ' ';
    cs[78] = ' ';
    cs[79] = ' ';
    cs[80] = ' ';
    cs[81] = ' ';
    cs[82] = ' ';
    cs[83] = ' ';
    cs[84] = ' ';
    cs[85] = ' ';
    cs[86] = ' ';
    cs[87] = ' ';
    cs[88] = ' ';
    cs[89] = ' ';
    cs[90] = ' ';
    cs[91] = ' ';
    cs[92] = ' ';
    cs[93] = ' ';
    cs[94] = ' ';
    cs[95] = ' ';
    cs[96] = ' ';
    cs[97] = ' ';
    cs[98] = ' ';
    cs[99] = ' ';
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('\uffff', cs1[0]);
    Assert.AreEqual<char>(' ', cs1[1]);
    Assert.AreEqual<char>(' ', cs1[2]);
    Assert.AreEqual<char>(' ', cs1[3]);
    Assert.AreEqual<char>(' ', cs1[4]);
    Assert.AreEqual<char>(' ', cs1[5]);
    Assert.AreEqual<char>(' ', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub902()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '@';
    cs[1] = 't';
    cs[2] = ' ';
    cs[3] = ' ';
    cs[4] = ' ';
    cs[5] = ' ';
    cs[6] = ' ';
    cs[7] = ' ';
    cs[9] = ' ';
    cs[10] = ' ';
    cs[11] = ' ';
    cs[12] = ' ';
    cs[13] = ' ';
    cs[14] = ' ';
    cs[15] = ' ';
    cs[16] = ' ';
    cs[17] = ' ';
    cs[18] = ' ';
    cs[19] = ' ';
    cs[20] = ' ';
    cs[21] = ' ';
    cs[22] = ' ';
    cs[23] = ' ';
    cs[24] = ' ';
    cs[25] = ' ';
    cs[26] = ' ';
    cs[27] = ' ';
    cs[28] = ' ';
    cs[29] = ' ';
    cs[30] = ' ';
    cs[31] = ' ';
    cs[32] = ' ';
    cs[33] = ' ';
    cs[34] = ' ';
    cs[35] = ' ';
    cs[36] = ' ';
    cs[37] = ' ';
    cs[38] = ' ';
    cs[39] = ' ';
    cs[40] = ' ';
    cs[41] = ' ';
    cs[42] = ' ';
    cs[43] = ' ';
    cs[44] = ' ';
    cs[45] = ' ';
    cs[46] = ' ';
    cs[47] = ' ';
    cs[48] = ' ';
    cs[49] = ' ';
    cs[50] = ' ';
    cs[51] = ' ';
    cs[52] = ' ';
    cs[53] = ' ';
    cs[54] = ' ';
    cs[55] = ' ';
    cs[56] = ' ';
    cs[57] = ' ';
    cs[58] = ' ';
    cs[59] = ' ';
    cs[60] = ' ';
    cs[61] = ' ';
    cs[62] = ' ';
    cs[63] = ' ';
    cs[64] = ' ';
    cs[65] = ' ';
    cs[66] = ' ';
    cs[67] = ' ';
    cs[68] = ' ';
    cs[69] = ' ';
    cs[70] = ' ';
    cs[71] = ' ';
    cs[72] = ' ';
    cs[73] = ' ';
    cs[74] = ' ';
    cs[75] = ' ';
    cs[76] = ' ';
    cs[77] = ' ';
    cs[78] = ' ';
    cs[79] = ' ';
    cs[80] = ' ';
    cs[81] = ' ';
    cs[82] = ' ';
    cs[83] = ' ';
    cs[84] = ' ';
    cs[85] = ' ';
    cs[86] = ' ';
    cs[87] = ' ';
    cs[88] = ' ';
    cs[89] = ' ';
    cs[90] = ' ';
    cs[91] = ' ';
    cs[92] = ' ';
    cs[93] = ' ';
    cs[94] = ' ';
    cs[95] = ' ';
    cs[96] = ' ';
    cs[97] = ' ';
    cs[98] = ' ';
    cs[99] = ' ';
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('\t', cs1[0]);
    Assert.AreEqual<char>(' ', cs1[1]);
    Assert.AreEqual<char>(' ', cs1[2]);
    Assert.AreEqual<char>(' ', cs1[3]);
    Assert.AreEqual<char>(' ', cs1[4]);
    Assert.AreEqual<char>(' ', cs1[5]);
    Assert.AreEqual<char>(' ', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub793()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '&';
    cs[1] = '&';
    cs[2] = ' ';
    cs[3] = ' ';
    cs[4] = ' ';
    cs[5] = ' ';
    cs[6] = ' ';
    cs[8] = ' ';
    cs[9] = ' ';
    cs[10] = ' ';
    cs[11] = ' ';
    cs[12] = ' ';
    cs[13] = ' ';
    cs[14] = ' ';
    cs[15] = ' ';
    cs[16] = ' ';
    cs[17] = ' ';
    cs[18] = ' ';
    cs[19] = ' ';
    cs[20] = ' ';
    cs[21] = ' ';
    cs[22] = ' ';
    cs[23] = ' ';
    cs[24] = ' ';
    cs[25] = ' ';
    cs[26] = ' ';
    cs[27] = ' ';
    cs[28] = ' ';
    cs[29] = ' ';
    cs[30] = ' ';
    cs[31] = ' ';
    cs[32] = ' ';
    cs[33] = ' ';
    cs[34] = ' ';
    cs[35] = ' ';
    cs[36] = ' ';
    cs[37] = ' ';
    cs[38] = ' ';
    cs[39] = ' ';
    cs[40] = ' ';
    cs[41] = ' ';
    cs[42] = ' ';
    cs[43] = ' ';
    cs[44] = ' ';
    cs[45] = ' ';
    cs[46] = ' ';
    cs[47] = ' ';
    cs[48] = ' ';
    cs[49] = ' ';
    cs[50] = ' ';
    cs[51] = ' ';
    cs[52] = ' ';
    cs[53] = ' ';
    cs[54] = ' ';
    cs[55] = ' ';
    cs[56] = ' ';
    cs[57] = ' ';
    cs[58] = ' ';
    cs[59] = ' ';
    cs[60] = ' ';
    cs[61] = ' ';
    cs[62] = ' ';
    cs[63] = ' ';
    cs[64] = ' ';
    cs[65] = ' ';
    cs[66] = ' ';
    cs[67] = ' ';
    cs[68] = ' ';
    cs[69] = ' ';
    cs[70] = ' ';
    cs[71] = ' ';
    cs[72] = ' ';
    cs[73] = ' ';
    cs[74] = ' ';
    cs[75] = ' ';
    cs[76] = ' ';
    cs[77] = ' ';
    cs[78] = ' ';
    cs[79] = ' ';
    cs[80] = ' ';
    cs[81] = ' ';
    cs[82] = ' ';
    cs[83] = ' ';
    cs[84] = ' ';
    cs[85] = ' ';
    cs[86] = ' ';
    cs[87] = ' ';
    cs[88] = ' ';
    cs[89] = ' ';
    cs[90] = ' ';
    cs[91] = ' ';
    cs[92] = ' ';
    cs[93] = ' ';
    cs[94] = ' ';
    cs[95] = ' ';
    cs[96] = ' ';
    cs[97] = ' ';
    cs[98] = ' ';
    cs[99] = ' ';
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('\uffff', cs1[0]);
    Assert.AreEqual<char>('\uffff', cs1[1]);
    Assert.AreEqual<char>(' ', cs1[2]);
    Assert.AreEqual<char>(' ', cs1[3]);
    Assert.AreEqual<char>(' ', cs1[4]);
    Assert.AreEqual<char>(' ', cs1[5]);
    Assert.AreEqual<char>(' ', cs1[6]);
    Assert.AreEqual<char>('\0', cs1[7]);
    Assert.AreEqual<char>('\0', cs1[8]);
    Assert.AreEqual<char>('\0', cs1[9]);
    Assert.AreEqual<char>('\0', cs1[10]);
    Assert.AreEqual<char>('\0', cs1[11]);
    Assert.AreEqual<char>('\0', cs1[12]);
    Assert.AreEqual<char>('\0', cs1[13]);
    Assert.AreEqual<char>('\0', cs1[14]);
    Assert.AreEqual<char>('\0', cs1[15]);
    Assert.AreEqual<char>('\0', cs1[16]);
    Assert.AreEqual<char>('\0', cs1[17]);
    Assert.AreEqual<char>('\0', cs1[18]);
    Assert.AreEqual<char>('\0', cs1[19]);
    Assert.AreEqual<char>('\0', cs1[20]);
    Assert.AreEqual<char>('\0', cs1[21]);
    Assert.AreEqual<char>('\0', cs1[22]);
    Assert.AreEqual<char>('\0', cs1[23]);
    Assert.AreEqual<char>('\0', cs1[24]);
    Assert.AreEqual<char>('\0', cs1[25]);
    Assert.AreEqual<char>('\0', cs1[26]);
    Assert.AreEqual<char>('\0', cs1[27]);
    Assert.AreEqual<char>('\0', cs1[28]);
    Assert.AreEqual<char>('\0', cs1[29]);
    Assert.AreEqual<char>('\0', cs1[30]);
    Assert.AreEqual<char>('\0', cs1[31]);
    Assert.AreEqual<char>('\0', cs1[32]);
    Assert.AreEqual<char>('\0', cs1[33]);
    Assert.AreEqual<char>('\0', cs1[34]);
    Assert.AreEqual<char>('\0', cs1[35]);
    Assert.AreEqual<char>('\0', cs1[36]);
    Assert.AreEqual<char>('\0', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub643()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '@';
    cs[1] = 'n';
    cs[2] = '!';
    cs[3] = '!';
    cs[4] = '!';
    cs[5] = '!';
    cs[6] = '!';
    cs[7] = '@';
    cs[8] = ' ';
    cs[9] = ' ';
    cs[10] = ' ';
    cs[11] = ' ';
    cs[12] = ' ';
    cs[13] = ' ';
    cs[14] = ' ';
    cs[15] = ' ';
    cs[16] = ' ';
    cs[17] = ' ';
    cs[18] = ' ';
    cs[19] = ' ';
    cs[20] = ' ';
    cs[21] = ' ';
    cs[22] = ' ';
    cs[23] = ' ';
    cs[24] = ' ';
    cs[25] = ' ';
    cs[26] = ' ';
    cs[27] = ' ';
    cs[28] = ' ';
    cs[29] = ' ';
    cs[30] = ' ';
    cs[31] = ' ';
    cs[32] = ' ';
    cs[33] = ' ';
    cs[34] = ' ';
    cs[35] = ' ';
    cs[36] = ' ';
    cs[37] = ' ';
    cs[38] = ' ';
    cs[39] = ' ';
    cs[41] = ' ';
    cs[42] = ' ';
    cs[43] = ' ';
    cs[44] = ' ';
    cs[45] = ' ';
    cs[46] = ' ';
    cs[47] = ' ';
    cs[48] = ' ';
    cs[49] = ' ';
    cs[50] = ' ';
    cs[51] = ' ';
    cs[52] = ' ';
    cs[53] = ' ';
    cs[54] = ' ';
    cs[55] = ' ';
    cs[56] = ' ';
    cs[57] = ' ';
    cs[58] = ' ';
    cs[59] = ' ';
    cs[60] = ' ';
    cs[61] = ' ';
    cs[62] = ' ';
    cs[63] = ' ';
    cs[64] = ' ';
    cs[65] = ' ';
    cs[66] = ' ';
    cs[67] = ' ';
    cs[68] = ' ';
    cs[69] = ' ';
    cs[70] = ' ';
    cs[71] = ' ';
    cs[72] = ' ';
    cs[73] = ' ';
    cs[74] = ' ';
    cs[75] = ' ';
    cs[76] = ' ';
    cs[77] = ' ';
    cs[78] = ' ';
    cs[79] = ' ';
    cs[80] = ' ';
    cs[81] = ' ';
    cs[82] = ' ';
    cs[83] = ' ';
    cs[84] = ' ';
    cs[85] = ' ';
    cs[86] = ' ';
    cs[87] = ' ';
    cs[88] = ' ';
    cs[89] = ' ';
    cs[90] = ' ';
    cs[91] = ' ';
    cs[92] = ' ';
    cs[93] = ' ';
    cs[94] = ' ';
    cs[95] = ' ';
    cs[96] = ' ';
    cs[97] = ' ';
    cs[98] = ' ';
    cs[99] = ' ';
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('\n', cs1[0]);
    Assert.AreEqual<char>('!', cs1[1]);
    Assert.AreEqual<char>('!', cs1[2]);
    Assert.AreEqual<char>('!', cs1[3]);
    Assert.AreEqual<char>('!', cs1[4]);
    Assert.AreEqual<char>('!', cs1[5]);
    Assert.AreEqual<char>(' ', cs1[6]);
    Assert.AreEqual<char>(' ', cs1[7]);
    Assert.AreEqual<char>(' ', cs1[8]);
    Assert.AreEqual<char>(' ', cs1[9]);
    Assert.AreEqual<char>(' ', cs1[10]);
    Assert.AreEqual<char>(' ', cs1[11]);
    Assert.AreEqual<char>(' ', cs1[12]);
    Assert.AreEqual<char>(' ', cs1[13]);
    Assert.AreEqual<char>(' ', cs1[14]);
    Assert.AreEqual<char>(' ', cs1[15]);
    Assert.AreEqual<char>(' ', cs1[16]);
    Assert.AreEqual<char>(' ', cs1[17]);
    Assert.AreEqual<char>(' ', cs1[18]);
    Assert.AreEqual<char>(' ', cs1[19]);
    Assert.AreEqual<char>(' ', cs1[20]);
    Assert.AreEqual<char>(' ', cs1[21]);
    Assert.AreEqual<char>(' ', cs1[22]);
    Assert.AreEqual<char>(' ', cs1[23]);
    Assert.AreEqual<char>(' ', cs1[24]);
    Assert.AreEqual<char>(' ', cs1[25]);
    Assert.AreEqual<char>(' ', cs1[26]);
    Assert.AreEqual<char>(' ', cs1[27]);
    Assert.AreEqual<char>(' ', cs1[28]);
    Assert.AreEqual<char>(' ', cs1[29]);
    Assert.AreEqual<char>(' ', cs1[30]);
    Assert.AreEqual<char>(' ', cs1[31]);
    Assert.AreEqual<char>(' ', cs1[32]);
    Assert.AreEqual<char>(' ', cs1[33]);
    Assert.AreEqual<char>(' ', cs1[34]);
    Assert.AreEqual<char>(' ', cs1[35]);
    Assert.AreEqual<char>(' ', cs1[36]);
    Assert.AreEqual<char>(' ', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub467()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '@';
    cs[1] = 'n';
    cs[2] = '!';
    cs[3] = '!';
    cs[4] = '!';
    cs[5] = '!';
    cs[6] = '!';
    cs[7] = '@';
    cs[8] = 'n';
    cs[9] = ' ';
    cs[10] = ' ';
    cs[11] = ' ';
    cs[12] = ' ';
    cs[13] = ' ';
    cs[14] = ' ';
    cs[15] = ' ';
    cs[16] = ' ';
    cs[17] = ' ';
    cs[18] = ' ';
    cs[19] = ' ';
    cs[20] = ' ';
    cs[21] = ' ';
    cs[22] = ' ';
    cs[23] = ' ';
    cs[24] = ' ';
    cs[25] = ' ';
    cs[26] = ' ';
    cs[27] = ' ';
    cs[28] = ' ';
    cs[29] = ' ';
    cs[30] = ' ';
    cs[31] = ' ';
    cs[32] = ' ';
    cs[33] = ' ';
    cs[34] = ' ';
    cs[35] = ' ';
    cs[36] = ' ';
    cs[37] = ' ';
    cs[38] = ' ';
    cs[39] = ' ';
    cs[41] = ' ';
    cs[42] = ' ';
    cs[43] = ' ';
    cs[44] = ' ';
    cs[45] = ' ';
    cs[46] = ' ';
    cs[47] = ' ';
    cs[48] = ' ';
    cs[49] = ' ';
    cs[50] = ' ';
    cs[51] = ' ';
    cs[52] = ' ';
    cs[53] = ' ';
    cs[54] = ' ';
    cs[55] = ' ';
    cs[56] = ' ';
    cs[57] = ' ';
    cs[58] = ' ';
    cs[59] = ' ';
    cs[60] = ' ';
    cs[61] = ' ';
    cs[62] = ' ';
    cs[63] = ' ';
    cs[64] = ' ';
    cs[65] = ' ';
    cs[66] = ' ';
    cs[67] = ' ';
    cs[68] = ' ';
    cs[69] = ' ';
    cs[70] = ' ';
    cs[71] = ' ';
    cs[72] = ' ';
    cs[73] = ' ';
    cs[74] = ' ';
    cs[75] = ' ';
    cs[76] = ' ';
    cs[77] = ' ';
    cs[78] = ' ';
    cs[79] = ' ';
    cs[80] = ' ';
    cs[81] = ' ';
    cs[82] = ' ';
    cs[83] = ' ';
    cs[84] = ' ';
    cs[85] = ' ';
    cs[86] = ' ';
    cs[87] = ' ';
    cs[88] = ' ';
    cs[89] = ' ';
    cs[90] = ' ';
    cs[91] = ' ';
    cs[92] = ' ';
    cs[93] = ' ';
    cs[94] = ' ';
    cs[95] = ' ';
    cs[96] = ' ';
    cs[97] = ' ';
    cs[98] = ' ';
    cs[99] = ' ';
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('\n', cs1[0]);
    Assert.AreEqual<char>('!', cs1[1]);
    Assert.AreEqual<char>('!', cs1[2]);
    Assert.AreEqual<char>('!', cs1[3]);
    Assert.AreEqual<char>('!', cs1[4]);
    Assert.AreEqual<char>('!', cs1[5]);
    Assert.AreEqual<char>('\n', cs1[6]);
    Assert.AreEqual<char>(' ', cs1[7]);
    Assert.AreEqual<char>(' ', cs1[8]);
    Assert.AreEqual<char>(' ', cs1[9]);
    Assert.AreEqual<char>(' ', cs1[10]);
    Assert.AreEqual<char>(' ', cs1[11]);
    Assert.AreEqual<char>(' ', cs1[12]);
    Assert.AreEqual<char>(' ', cs1[13]);
    Assert.AreEqual<char>(' ', cs1[14]);
    Assert.AreEqual<char>(' ', cs1[15]);
    Assert.AreEqual<char>(' ', cs1[16]);
    Assert.AreEqual<char>(' ', cs1[17]);
    Assert.AreEqual<char>(' ', cs1[18]);
    Assert.AreEqual<char>(' ', cs1[19]);
    Assert.AreEqual<char>(' ', cs1[20]);
    Assert.AreEqual<char>(' ', cs1[21]);
    Assert.AreEqual<char>(' ', cs1[22]);
    Assert.AreEqual<char>(' ', cs1[23]);
    Assert.AreEqual<char>(' ', cs1[24]);
    Assert.AreEqual<char>(' ', cs1[25]);
    Assert.AreEqual<char>(' ', cs1[26]);
    Assert.AreEqual<char>(' ', cs1[27]);
    Assert.AreEqual<char>(' ', cs1[28]);
    Assert.AreEqual<char>(' ', cs1[29]);
    Assert.AreEqual<char>(' ', cs1[30]);
    Assert.AreEqual<char>(' ', cs1[31]);
    Assert.AreEqual<char>(' ', cs1[32]);
    Assert.AreEqual<char>(' ', cs1[33]);
    Assert.AreEqual<char>(' ', cs1[34]);
    Assert.AreEqual<char>(' ', cs1[35]);
    Assert.AreEqual<char>(' ', cs1[36]);
    Assert.AreEqual<char>(' ', cs1[37]);
    Assert.AreEqual<char>('\0', cs1[38]);
    Assert.AreEqual<char>('\0', cs1[39]);
    Assert.AreEqual<char>('\0', cs1[40]);
    Assert.AreEqual<char>('\0', cs1[41]);
    Assert.AreEqual<char>('\0', cs1[42]);
    Assert.AreEqual<char>('\0', cs1[43]);
    Assert.AreEqual<char>('\0', cs1[44]);
    Assert.AreEqual<char>('\0', cs1[45]);
    Assert.AreEqual<char>('\0', cs1[46]);
    Assert.AreEqual<char>('\0', cs1[47]);
    Assert.AreEqual<char>('\0', cs1[48]);
    Assert.AreEqual<char>('\0', cs1[49]);
    Assert.AreEqual<char>('\0', cs1[50]);
    Assert.AreEqual<char>('\0', cs1[51]);
    Assert.AreEqual<char>('\0', cs1[52]);
    Assert.AreEqual<char>('\0', cs1[53]);
    Assert.AreEqual<char>('\0', cs1[54]);
    Assert.AreEqual<char>('\0', cs1[55]);
    Assert.AreEqual<char>('\0', cs1[56]);
    Assert.AreEqual<char>('\0', cs1[57]);
    Assert.AreEqual<char>('\0', cs1[58]);
    Assert.AreEqual<char>('\0', cs1[59]);
    Assert.AreEqual<char>('\0', cs1[60]);
    Assert.AreEqual<char>('\0', cs1[61]);
    Assert.AreEqual<char>('\0', cs1[62]);
    Assert.AreEqual<char>('\0', cs1[63]);
    Assert.AreEqual<char>('\0', cs1[64]);
    Assert.AreEqual<char>('\0', cs1[65]);
    Assert.AreEqual<char>('\0', cs1[66]);
    Assert.AreEqual<char>('\0', cs1[67]);
    Assert.AreEqual<char>('\0', cs1[68]);
    Assert.AreEqual<char>('\0', cs1[69]);
    Assert.AreEqual<char>('\0', cs1[70]);
    Assert.AreEqual<char>('\0', cs1[71]);
    Assert.AreEqual<char>('\0', cs1[72]);
    Assert.AreEqual<char>('\0', cs1[73]);
    Assert.AreEqual<char>('\0', cs1[74]);
    Assert.AreEqual<char>('\0', cs1[75]);
    Assert.AreEqual<char>('\0', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub154()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '@';
    cs[1] = 'A';
    cs[2] = 'A';
    cs[3] = 'A';
    cs[4] = 'A';
    cs[5] = 'A';
    cs[6] = 'A';
    cs[7] = 'A';
    cs[8] = 'A';
    cs[9] = 'A';
    cs[10] = 'A';
    cs[11] = 'A';
    cs[12] = 'A';
    cs[13] = 'A';
    cs[14] = 'A';
    cs[15] = 'A';
    cs[16] = 'A';
    cs[17] = 'A';
    cs[18] = '\u0001';
    cs[19] = '\u0001';
    cs[20] = '\u0001';
    cs[21] = '\u0001';
    cs[22] = '\u0001';
    cs[23] = '\u0001';
    cs[24] = '\u0001';
    cs[25] = '!';
    cs[26] = '\u0001';
    cs[27] = 'A';
    cs[28] = 'A';
    cs[29] = 'A';
    cs[30] = 'A';
    cs[31] = 'A';
    cs[32] = 'A';
    cs[33] = 'A';
    cs[34] = 'A';
    cs[35] = 'A';
    cs[36] = 'A';
    cs[37] = 'A';
    cs[38] = 'A';
    cs[39] = 'A';
    cs[40] = 'A';
    cs[41] = 'A';
    cs[42] = 'A';
    cs[43] = 'A';
    cs[44] = 'A';
    cs[45] = 'A';
    cs[46] = 'A';
    cs[47] = 'A';
    cs[48] = 'A';
    cs[49] = 'A';
    cs[50] = '\u0001';
    cs[51] = '\u0001';
    cs[52] = '\u0001';
    cs[53] = '\u0001';
    cs[54] = 'A';
    cs[55] = 'A';
    cs[56] = 'A';
    cs[57] = 'A';
    cs[58] = 'A';
    cs[59] = 'A';
    cs[60] = 'A';
    cs[61] = 'A';
    cs[62] = 'A';
    cs[63] = 'A';
    cs[64] = 'A';
    cs[65] = '!';
    cs[66] = '\u0001';
    cs[67] = '\u0001';
    cs[68] = 'A';
    cs[69] = 'A';
    cs[70] = 'A';
    cs[71] = 'A';
    cs[72] = 'A';
    cs[73] = 'A';
    cs[74] = '\u0001';
    cs[75] = 'A';
    cs[76] = 'A';
    cs[77] = 'A';
    cs[78] = 'A';
    cs[79] = 'A';
    cs[80] = 'A';
    cs[81] = 'A';
    cs[82] = 'A';
    cs[83] = ' ';
    cs[84] = ' ';
    cs[85] = ' ';
    cs[86] = ' ';
    cs[87] = ' ';
    cs[88] = ' ';
    cs[89] = ' ';
    cs[90] = '@';
    cs[91] = ' ';
    cs[92] = ' ';
    cs[93] = ' ';
    cs[94] = ' ';
    cs[95] = ' ';
    cs[96] = ' ';
    cs[97] = ' ';
    cs[98] = ' ';
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('A', cs1[0]);
    Assert.AreEqual<char>('A', cs1[1]);
    Assert.AreEqual<char>('A', cs1[2]);
    Assert.AreEqual<char>('A', cs1[3]);
    Assert.AreEqual<char>('A', cs1[4]);
    Assert.AreEqual<char>('A', cs1[5]);
    Assert.AreEqual<char>('A', cs1[6]);
    Assert.AreEqual<char>('A', cs1[7]);
    Assert.AreEqual<char>('A', cs1[8]);
    Assert.AreEqual<char>('A', cs1[9]);
    Assert.AreEqual<char>('A', cs1[10]);
    Assert.AreEqual<char>('A', cs1[11]);
    Assert.AreEqual<char>('A', cs1[12]);
    Assert.AreEqual<char>('A', cs1[13]);
    Assert.AreEqual<char>('A', cs1[14]);
    Assert.AreEqual<char>('A', cs1[15]);
    Assert.AreEqual<char>('A', cs1[16]);
    Assert.AreEqual<char>('\u0001', cs1[17]);
    Assert.AreEqual<char>('\u0001', cs1[18]);
    Assert.AreEqual<char>('\u0001', cs1[19]);
    Assert.AreEqual<char>('\u0001', cs1[20]);
    Assert.AreEqual<char>('\u0001', cs1[21]);
    Assert.AreEqual<char>('\u0001', cs1[22]);
    Assert.AreEqual<char>('\u0001', cs1[23]);
    Assert.AreEqual<char>('!', cs1[24]);
    Assert.AreEqual<char>('\u0001', cs1[25]);
    Assert.AreEqual<char>('A', cs1[26]);
    Assert.AreEqual<char>('A', cs1[27]);
    Assert.AreEqual<char>('A', cs1[28]);
    Assert.AreEqual<char>('A', cs1[29]);
    Assert.AreEqual<char>('A', cs1[30]);
    Assert.AreEqual<char>('A', cs1[31]);
    Assert.AreEqual<char>('A', cs1[32]);
    Assert.AreEqual<char>('A', cs1[33]);
    Assert.AreEqual<char>('A', cs1[34]);
    Assert.AreEqual<char>('A', cs1[35]);
    Assert.AreEqual<char>('A', cs1[36]);
    Assert.AreEqual<char>('A', cs1[37]);
    Assert.AreEqual<char>('A', cs1[38]);
    Assert.AreEqual<char>('A', cs1[39]);
    Assert.AreEqual<char>('A', cs1[40]);
    Assert.AreEqual<char>('A', cs1[41]);
    Assert.AreEqual<char>('A', cs1[42]);
    Assert.AreEqual<char>('A', cs1[43]);
    Assert.AreEqual<char>('A', cs1[44]);
    Assert.AreEqual<char>('A', cs1[45]);
    Assert.AreEqual<char>('A', cs1[46]);
    Assert.AreEqual<char>('A', cs1[47]);
    Assert.AreEqual<char>('A', cs1[48]);
    Assert.AreEqual<char>('\u0001', cs1[49]);
    Assert.AreEqual<char>('\u0001', cs1[50]);
    Assert.AreEqual<char>('\u0001', cs1[51]);
    Assert.AreEqual<char>('\u0001', cs1[52]);
    Assert.AreEqual<char>('A', cs1[53]);
    Assert.AreEqual<char>('A', cs1[54]);
    Assert.AreEqual<char>('A', cs1[55]);
    Assert.AreEqual<char>('A', cs1[56]);
    Assert.AreEqual<char>('A', cs1[57]);
    Assert.AreEqual<char>('A', cs1[58]);
    Assert.AreEqual<char>('A', cs1[59]);
    Assert.AreEqual<char>('A', cs1[60]);
    Assert.AreEqual<char>('A', cs1[61]);
    Assert.AreEqual<char>('A', cs1[62]);
    Assert.AreEqual<char>('A', cs1[63]);
    Assert.AreEqual<char>('!', cs1[64]);
    Assert.AreEqual<char>('\u0001', cs1[65]);
    Assert.AreEqual<char>('\u0001', cs1[66]);
    Assert.AreEqual<char>('A', cs1[67]);
    Assert.AreEqual<char>('A', cs1[68]);
    Assert.AreEqual<char>('A', cs1[69]);
    Assert.AreEqual<char>('A', cs1[70]);
    Assert.AreEqual<char>('A', cs1[71]);
    Assert.AreEqual<char>('A', cs1[72]);
    Assert.AreEqual<char>('\u0001', cs1[73]);
    Assert.AreEqual<char>('A', cs1[74]);
    Assert.AreEqual<char>('A', cs1[75]);
    Assert.AreEqual<char>('A', cs1[76]);
    Assert.AreEqual<char>('A', cs1[77]);
    Assert.AreEqual<char>('A', cs1[78]);
    Assert.AreEqual<char>('A', cs1[79]);
    Assert.AreEqual<char>('A', cs1[80]);
    Assert.AreEqual<char>('A', cs1[81]);
    Assert.AreEqual<char>(' ', cs1[82]);
    Assert.AreEqual<char>(' ', cs1[83]);
    Assert.AreEqual<char>(' ', cs1[84]);
    Assert.AreEqual<char>(' ', cs1[85]);
    Assert.AreEqual<char>(' ', cs1[86]);
    Assert.AreEqual<char>(' ', cs1[87]);
    Assert.AreEqual<char>(' ', cs1[88]);
    Assert.AreEqual<char>(' ', cs1[89]);
    Assert.AreEqual<char>(' ', cs1[90]);
    Assert.AreEqual<char>(' ', cs1[91]);
    Assert.AreEqual<char>(' ', cs1[92]);
    Assert.AreEqual<char>(' ', cs1[93]);
    Assert.AreEqual<char>(' ', cs1[94]);
    Assert.AreEqual<char>(' ', cs1[95]);
    Assert.AreEqual<char>(' ', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub626()
{
    bool b;
    char[] cs = new char[100];
    char[] cs1 = (char[])null;
    cs[0] = '&';
    cs[1] = '&';
    cs[2] = '!';
    cs[3] = '!';
    cs[4] = '!';
    cs[5] = '!';
    cs[6] = '!';
    cs[7] = '!';
    cs[8] = '!';
    cs[9] = '!';
    cs[10] = '&';
    cs[11] = '!';
    cs[12] = '!';
    cs[13] = '@';
    cs[14] = 't';
    cs[15] = '!';
    cs[16] = '!';
    cs[17] = '!';
    cs[18] = '!';
    cs[19] = '!';
    cs[20] = '!';
    cs[21] = '!';
    cs[22] = '!';
    cs[23] = '!';
    cs[24] = '!';
    cs[25] = '!';
    cs[26] = '!';
    cs[27] = '!';
    cs[28] = '!';
    cs[29] = '!';
    cs[30] = '!';
    cs[31] = '!';
    cs[32] = '!';
    cs[33] = '!';
    cs[34] = '!';
    cs[35] = '!';
    cs[36] = '!';
    cs[37] = '!';
    cs[38] = '!';
    cs[39] = '!';
    cs[40] = '!';
    cs[41] = '!';
    cs[42] = '!';
    cs[43] = '!';
    cs[44] = '!';
    cs[45] = '!';
    cs[46] = '!';
    cs[47] = '!';
    cs[48] = '!';
    cs[49] = '!';
    cs[50] = '!';
    cs[51] = '!';
    cs[52] = '!';
    cs[53] = '!';
    cs[54] = '!';
    cs[55] = '!';
    cs[56] = '!';
    cs[57] = '!';
    cs[58] = '!';
    cs[59] = '!';
    cs[60] = '!';
    cs[61] = '!';
    cs[62] = '!';
    cs[63] = '!';
    cs[64] = '!';
    cs[65] = '!';
    cs[66] = '!';
    cs[67] = '!';
    cs[68] = '!';
    cs[69] = '!';
    cs[70] = '!';
    cs[71] = '!';
    cs[72] = '@';
    cs[73] = 't';
    cs[74] = ' ';
    cs[75] = ' ';
    cs[76] = ' ';
    cs[77] = ' ';
    cs[78] = ' ';
    cs[80] = ' ';
    cs[81] = ' ';
    cs[82] = ' ';
    cs[83] = ' ';
    cs[84] = ' ';
    cs[85] = ' ';
    cs[86] = ' ';
    cs[87] = ' ';
    cs[88] = ' ';
    cs[89] = ' ';
    cs[90] = ' ';
    cs[91] = ' ';
    cs[92] = ' ';
    cs[93] = ' ';
    cs[94] = ' ';
    cs[95] = ' ';
    cs[96] = ' ';
    cs[97] = ' ';
    cs[98] = ' ';
    cs[99] = ' ';
    b = this.getsub(cs, out cs1);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)cs1);
    Assert.AreEqual<int>(100, cs1.Length);
    Assert.AreEqual<char>('\uffff', cs1[0]);
    Assert.AreEqual<char>('\uffff', cs1[1]);
    Assert.AreEqual<char>('!', cs1[2]);
    Assert.AreEqual<char>('!', cs1[3]);
    Assert.AreEqual<char>('!', cs1[4]);
    Assert.AreEqual<char>('!', cs1[5]);
    Assert.AreEqual<char>('!', cs1[6]);
    Assert.AreEqual<char>('!', cs1[7]);
    Assert.AreEqual<char>('!', cs1[8]);
    Assert.AreEqual<char>('!', cs1[9]);
    Assert.AreEqual<char>('\uffff', cs1[10]);
    Assert.AreEqual<char>('!', cs1[11]);
    Assert.AreEqual<char>('!', cs1[12]);
    Assert.AreEqual<char>('\t', cs1[13]);
    Assert.AreEqual<char>('!', cs1[14]);
    Assert.AreEqual<char>('!', cs1[15]);
    Assert.AreEqual<char>('!', cs1[16]);
    Assert.AreEqual<char>('!', cs1[17]);
    Assert.AreEqual<char>('!', cs1[18]);
    Assert.AreEqual<char>('!', cs1[19]);
    Assert.AreEqual<char>('!', cs1[20]);
    Assert.AreEqual<char>('!', cs1[21]);
    Assert.AreEqual<char>('!', cs1[22]);
    Assert.AreEqual<char>('!', cs1[23]);
    Assert.AreEqual<char>('!', cs1[24]);
    Assert.AreEqual<char>('!', cs1[25]);
    Assert.AreEqual<char>('!', cs1[26]);
    Assert.AreEqual<char>('!', cs1[27]);
    Assert.AreEqual<char>('!', cs1[28]);
    Assert.AreEqual<char>('!', cs1[29]);
    Assert.AreEqual<char>('!', cs1[30]);
    Assert.AreEqual<char>('!', cs1[31]);
    Assert.AreEqual<char>('!', cs1[32]);
    Assert.AreEqual<char>('!', cs1[33]);
    Assert.AreEqual<char>('!', cs1[34]);
    Assert.AreEqual<char>('!', cs1[35]);
    Assert.AreEqual<char>('!', cs1[36]);
    Assert.AreEqual<char>('!', cs1[37]);
    Assert.AreEqual<char>('!', cs1[38]);
    Assert.AreEqual<char>('!', cs1[39]);
    Assert.AreEqual<char>('!', cs1[40]);
    Assert.AreEqual<char>('!', cs1[41]);
    Assert.AreEqual<char>('!', cs1[42]);
    Assert.AreEqual<char>('!', cs1[43]);
    Assert.AreEqual<char>('!', cs1[44]);
    Assert.AreEqual<char>('!', cs1[45]);
    Assert.AreEqual<char>('!', cs1[46]);
    Assert.AreEqual<char>('!', cs1[47]);
    Assert.AreEqual<char>('!', cs1[48]);
    Assert.AreEqual<char>('!', cs1[49]);
    Assert.AreEqual<char>('!', cs1[50]);
    Assert.AreEqual<char>('!', cs1[51]);
    Assert.AreEqual<char>('!', cs1[52]);
    Assert.AreEqual<char>('!', cs1[53]);
    Assert.AreEqual<char>('!', cs1[54]);
    Assert.AreEqual<char>('!', cs1[55]);
    Assert.AreEqual<char>('!', cs1[56]);
    Assert.AreEqual<char>('!', cs1[57]);
    Assert.AreEqual<char>('!', cs1[58]);
    Assert.AreEqual<char>('!', cs1[59]);
    Assert.AreEqual<char>('!', cs1[60]);
    Assert.AreEqual<char>('!', cs1[61]);
    Assert.AreEqual<char>('!', cs1[62]);
    Assert.AreEqual<char>('!', cs1[63]);
    Assert.AreEqual<char>('!', cs1[64]);
    Assert.AreEqual<char>('!', cs1[65]);
    Assert.AreEqual<char>('!', cs1[66]);
    Assert.AreEqual<char>('!', cs1[67]);
    Assert.AreEqual<char>('!', cs1[68]);
    Assert.AreEqual<char>('!', cs1[69]);
    Assert.AreEqual<char>('!', cs1[70]);
    Assert.AreEqual<char>('\t', cs1[71]);
    Assert.AreEqual<char>(' ', cs1[72]);
    Assert.AreEqual<char>(' ', cs1[73]);
    Assert.AreEqual<char>(' ', cs1[74]);
    Assert.AreEqual<char>(' ', cs1[75]);
    Assert.AreEqual<char>(' ', cs1[76]);
    Assert.AreEqual<char>('\0', cs1[77]);
    Assert.AreEqual<char>('\0', cs1[78]);
    Assert.AreEqual<char>('\0', cs1[79]);
    Assert.AreEqual<char>('\0', cs1[80]);
    Assert.AreEqual<char>('\0', cs1[81]);
    Assert.AreEqual<char>('\0', cs1[82]);
    Assert.AreEqual<char>('\0', cs1[83]);
    Assert.AreEqual<char>('\0', cs1[84]);
    Assert.AreEqual<char>('\0', cs1[85]);
    Assert.AreEqual<char>('\0', cs1[86]);
    Assert.AreEqual<char>('\0', cs1[87]);
    Assert.AreEqual<char>('\0', cs1[88]);
    Assert.AreEqual<char>('\0', cs1[89]);
    Assert.AreEqual<char>('\0', cs1[90]);
    Assert.AreEqual<char>('\0', cs1[91]);
    Assert.AreEqual<char>('\0', cs1[92]);
    Assert.AreEqual<char>('\0', cs1[93]);
    Assert.AreEqual<char>('\0', cs1[94]);
    Assert.AreEqual<char>('\0', cs1[95]);
    Assert.AreEqual<char>('\0', cs1[96]);
    Assert.AreEqual<char>('\0', cs1[97]);
    Assert.AreEqual<char>('\0', cs1[98]);
    Assert.AreEqual<char>('\0', cs1[99]);
}
    }
}
