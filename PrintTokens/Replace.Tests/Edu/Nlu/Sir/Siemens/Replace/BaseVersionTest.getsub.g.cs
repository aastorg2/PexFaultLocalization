// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Edu.Nlu.Sir.Siemens.Replace
{
    public partial class BaseVersionTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void getsubThrowsNullReferenceException135()
{
    bool b;
    string s = (string)null;
    b = this.getsub((string)null, out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException256()
{
    bool b;
    string s = (string)null;
    b = this.getsub("", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub695()
{
    bool b;
    string s = (string)null;
    b = this.getsub("\0", out s);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<string>("\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException35()
{
    bool b;
    string s = (string)null;
    b = this.getsub("\u0001", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException424()
{
    bool b;
    string s = (string)null;
    b = this.getsub("&", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException343()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException899()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@@", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException781()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@t", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub712()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("@\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException158()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@n", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException180()
{
    bool b;
    string s = (string)null;
    b = this.getsub("&&", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException864()
{
    bool b;
    string s = (string)null;
    b = this.getsub("\u0001\u0001", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException788()
{
    bool b;
    string s = (string)null;
    b = this.getsub("\u0001&\u0001", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException859()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@@@", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException800()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@@@@", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException751()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@n@n", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getsubThrowsIndexOutOfRangeException528()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@t@t", out s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub710()
{
    bool b;
    string s = (string)null;
    b = this.getsub("\u0001\0\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\u0001\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub310()
{
    bool b;
    string s = (string)null;
    b = this.getsub("&\0\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\uffff\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub68()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@\u0001\0\0\0\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\u0001\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub75()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@t\0\0\0\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\t\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub202()
{
    bool b;
    string s = (string)null;
    b = this.getsub("@n\0\0\0\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\n\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub950()
{
    bool b;
    string s = (string)null;
    b = this.getsub("&\u0001\0\0\0\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\uffff\u0001\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub426()
{
    bool b;
    string s = (string)null;
    b = this.getsub("&&\0\0\0\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\uffff\uffff\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub984()
{
    bool b;
    string s = (string)null;
    b = this.getsub("&@\u0001&&\u0001\0\0\0\0\0\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\uffff\u0001\uffff\uffff\u0001\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub657()
{
    bool b;
    string s = (string)null;
    b = this.getsub("&@\u0001&&\u0001\u0001&&&&\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\uffff\u0001\uffff\uffff\u0001\u0001\uffff\uffff\uffff\uffff\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub324()
{
    bool b;
    string s = (string)null;
    b = this.getsub("\u0001@@@@\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\u0001@@\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub78()
{
    bool b;
    string s = (string)null;
    b = this.getsub("\u0001@t\u0001@\u0001@n@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@t@@@@@@@@@@@@@@@@@@@@@@@@@\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\u0001\t\u0001\u0001\n\u0001\u0001\u0001\u0001\u0001\u0001\t@@@@@@@@@@@@@\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub135()
{
    bool b;
    string s = (string)null;
    b = this.getsub("\u0001@n@n@@@@@@\0", out s);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<string>("\u0001\n\n@@@\0", s);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getsub706()
{
    bool b;
    string s = (string)null;
    b = this.getsub
            ("&@\u0001&&\u0001\u0001&&&&\u0001&&&&&&&&&&&\u0001&&&\u0001&&&&&&&&&&&&&&&&&&&\u0001&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\u0001&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\0", 
             out s);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<string>
        ("\uffff\u0001\uffff\uffff\u0001\u0001\uffff\uffff\uffff\uffff\u0001\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\u0001\uffff\uffff\uffff\u0001\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\u0001\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\u0001\uffff\uffff\uffff\uffff\uffff", 
         s);
}
    }
}
