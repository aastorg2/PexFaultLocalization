// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Edu.Nlu.Sir.Siemens.Replace
{
    public partial class BaseVersionTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException816()
{
    bool b;
    int i = 1021;
    int i1 = 0;
    b = this.getccl("\0\0", ref i, "\0", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException271()
{
    bool b;
    int i = 0;
    int i1 = 0;
    b = this.getccl("^^", ref i, "^", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl971()
{
    bool b;
    int i = 0;
    int i1 = 0;
    b = this.getccl("\0\0", ref i, "\0\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(1, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException488()
{
    bool b;
    int i = 0;
    int i1 = 0;
    b = this.getccl("^^^", ref i, "^", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException723()
{
    bool b;
    int i = 0;
    int i1 = 0;
    b = this.getccl("-^-", ref i, "^", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(ArgumentOutOfRangeException))]
public void getcclThrowsArgumentOutOfRangeException235()
{
    bool b;
    int i = 0;
    int i1 = 2;
    b = this.getccl("^^", ref i, "^", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl548()
{
    bool b;
    int i = 0;
    int i1 = 0;
    b = this.getccl("\0]", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<int>(1, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException878()
{
    bool b;
    int i = 0;
    int i1 = 1;
    b = this.getccl("^^", ref i, "^", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException220()
{
    bool b;
    int i = 0;
    int i1 = 0;
    b = this.getccl("@@", ref i, "\0", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl216()
{
    bool b;
    int i = 0;
    int i1 = 0;
    b = this.getccl("@@\0", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(2, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException951()
{
    bool b;
    int i = 0;
    int i1 = 0;
    b = this.getccl("@@\u0001", ref i, "\0", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException453()
{
    bool b;
    int i = 0;
    int i1 = 0;
    b = this.getccl("@@n", ref i, "\0", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException585()
{
    bool b;
    int i = -1;
    int i1 = 100;
    b = this.getccl("^--", ref i, "^", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException588()
{
    bool b;
    int i = 0;
    int i1 = 1;
    b = this.getccl("^^", ref i, "^^", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException908()
{
    bool b;
    int i = 0;
    int i1 = 100;
    b = this.getccl("^^--^", ref i, "^", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException384()
{
    bool b;
    int i = 0;
    int i1 = 0;
    b = this.getccl("@\u0001@@", ref i, "@\u0001@@", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException187()
{
    bool b;
    int i = 0;
    int i1 = 0;
    b = this.getccl("@\u0001@@@", ref i, "@\u0001@@", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException295()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("@@\u0001@\u0001", ref i, "@@\u0001@", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException555()
{
    bool b;
    int i = 0;
    int i1 = 1;
    b = this.getccl("^^", ref i, "^^^", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException904()
{
    bool b;
    int i = 1;
    int i1 = 99;
    b = this.getccl("-\01-\u0001----", ref i, 
                    "-\01-\u0001-----------------------------------------------------------------------------------------------", 
                    ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException739()
{
    bool b;
    int i = 5;
    int i1 = 99;
    b = this.getccl("-----\01-1--", ref i, 
                    "-----\01-1-------------------------------------------------------------------------------------------", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException191()
{
    bool b;
    int i = 1;
    int i1 = 99;
    b = this.getccl("-\06-p---", ref i, 
                    "-\06-p-----------------------------------------------------------------------------------------------", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException844()
{
    bool b;
    int i = 0;
    int i1 = 99;
    b = this.getccl("\09-s-1", ref i, 
                    "\09-s-1----------------------------------------------------------------------------------------------", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException743()
{
    bool b;
    int i = 1;
    int i1 = 99;
    b = this.getccl("-\09-s-x", ref i, 
                    "-\09-s-x---------------------------------------------------------------------------------------------", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException888()
{
    bool b;
    int i = 3;
    int i1 = 99;
    b = this.getccl("---\01--1-\u0001", ref i, 
                    "---\01--1-\u0001------------------------------------------------------------------------------------------", 
                    ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void getcclThrowsIndexOutOfRangeException902()
{
    bool b;
    int i = 1;
    int i1 = 99;
    b = this.getccl("-\01-@@@@---", ref i, 
                    "-\01-@@@@--------------------------------------------------------------------------------------------", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl396()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u4000\b\0", ref i, "\u4000", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(2, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl920()
{
    bool b;
    int i = 2;
    int i1 = 0;
    b = this.getccl("\u0002\u0001@^\0^", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl257()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u0004\u0010\u0001\0\0", ref i, "\u0004", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(3, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl72()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u0001@\u0080\0\0\0\0", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(3, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl213()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u8000\u8000]\u4000\0]]", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<int>(2, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl270()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u4000\u0800-\u0001\0-", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(4, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void getccl914()
{
    bool b;
    int i = 2;
    int i1 = 0;
    b = this.getccl("\u0200\b4-\u1000\0", ref i, "\0", ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl121()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl(" @@\0@", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(3, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl12101()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u0010@@\u8000\0\0\0\0", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl159()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u4000l-l\0", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl206()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u2000@@n\0nn", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl490()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u2000@@t\0tt", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
[PexRaisedException(typeof(ArgumentOutOfRangeException))]
public void getcclThrowsArgumentOutOfRangeException561()
{
    bool b;
    int i = 1;
    int i1 = 99;
    b = this.getccl("\u0004\u0100\0", ref i, 
                    "\u0004\u0100\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", 
                    ref i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl481()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u0001\u0080\0", ref i, "\u0001\u0080", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(2, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl922()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u2000\u0800\u0001\u0800\0\0", ref i, "\u2000\u0800", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(4, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl223()
{
    bool b;
    int i = 2;
    int i1 = 0;
    b = this.getccl("\u0400\u0400\u8011--\0-", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(5, i);
    Assert.AreEqual<int>(4, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl264()
{
    bool b;
    int i = 2;
    int i1 = 0;
    b = this.getccl("\u0001@0--\u0001\0", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(6, i);
    Assert.AreEqual<int>(5, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl731()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl(" A---\u0001\0", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(6, i);
    Assert.AreEqual<int>(6, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl417()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl("\u0004\u0001^--\u0001@@\u0001\u0001@@\u0001\0", ref i, "\0\0\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(13, i);
    Assert.AreEqual<int>(10, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl894()
{
    bool b;
    int i = 2;
    int i1 = 0;
    b = this.getccl("\u0010\u0800\u2000-\0\0", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl801()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl(" @\0", ref i, "\0\0\0", ref i1);
    Assert.AreEqual<bool>(false, b);
    Assert.AreEqual<int>(2, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl208()
{
    bool b;
    int i = 1;
    int i1 = 0;
    b = this.getccl(" \b]\u0800\0]", ref i, "\0\0\0", ref i1);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<int>(2, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void getccl981()
{
    bool b;
    int i = 2;
    int i1 = 0;
    b = this.getccl("\u8000\u0400\u8011-]\u4000\0", ref i, "\0", ref i1);
    Assert.AreEqual<bool>(true, b);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(3, i1);
}
    }
}
