// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Edu.Nlu.Sir.Siemens.Replace
{
    public partial class BaseVersionTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash971()
{
    char[] cs = new char[100];
    int i = 1;
    char[] cs1 = new char[100];
    int i1 = 0;
    this.dodash(' ', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(1, i);
    Assert.AreEqual<int>(0, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash783()
{
    char[] cs = new char[100];
    int i = 2;
    char[] cs1 = new char[100];
    int i1 = 0;
    cs[2] = '\u0001';
    this.dodash('\0', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(3, i);
    Assert.AreEqual<int>(0, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash140()
{
    char[] cs = new char[100];
    int i = 2;
    char[] cs1 = new char[100];
    int i1 = 0;
    cs[2] = '\u0001';
    this.dodash('\0', cs, ref i, cs1, ref i1, 1);
    Assert.AreEqual<int>(3, i);
    Assert.AreEqual<int>(1, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash294()
{
    char[] cs = new char[100];
    int i = 1;
    char[] cs1 = new char[100];
    int i1 = 0;
    cs[0] = '@';
    cs[1] = '\u0001';
    this.dodash('\0', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(2, i);
    Assert.AreEqual<int>(0, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash373()
{
    char[] cs = new char[100];
    int i = 4;
    char[] cs1 = new char[100];
    int i1 = 0;
    cs[4] = '-';
    this.dodash('\0', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(5, i);
    Assert.AreEqual<int>(0, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash286()
{
    char[] cs = new char[100];
    int i = 1;
    char[] cs1 = new char[100];
    int i1 = 0;
    cs[0] = '@';
    cs[1] = '@';
    this.dodash('\0', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(2, i);
    Assert.AreEqual<int>(0, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash613()
{
    char[] cs = new char[100];
    int i = 1;
    char[] cs1 = new char[100];
    int i1 = 0;
    cs[0] = '@';
    cs[1] = '@';
    cs[2] = '\u0001';
    this.dodash('\0', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(3, i);
    Assert.AreEqual<int>(0, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash218()
{
    char[] cs = new char[100];
    int i = 2;
    char[] cs1 = new char[100];
    int i1 = 0;
    cs[1] = '@';
    cs[2] = '@';
    cs[3] = 'n';
    this.dodash('\0', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(0, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash457()
{
    char[] cs = new char[100];
    int i = 2;
    char[] cs1 = new char[100];
    int i1 = 0;
    cs[1] = '@';
    cs[2] = '@';
    cs[3] = 't';
    this.dodash('\0', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(0, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash452()
{
    char[] cs = new char[100];
    int i = 4;
    char[] cs1 = new char[100];
    int i1 = 2;
    cs[4] = '-';
    this.dodash('\0', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(5, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash673()
{
    char[] cs = new char[100];
    int i = 4;
    char[] cs1 = new char[100];
    int i1 = 2;
    cs[4] = '-';
    cs[5] = '\u0001';
    this.dodash('\0', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(6, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash869()
{
    char[] cs = new char[100];
    int i = 1;
    char[] cs1 = new char[100];
    int i1 = 2;
    cs[0] = '1';
    cs[1] = '-';
    cs[2] = '\u0001';
    this.dodash('\0', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(3, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash133()
{
    char[] cs = new char[100];
    int i = 4;
    char[] cs1 = new char[100];
    int i1 = 2;
    cs[3] = '1';
    cs[4] = '-';
    cs[5] = '1';
    this.dodash('\0', cs, ref i, cs1, ref i1, 0);
    Assert.AreEqual<int>(6, i);
    Assert.AreEqual<int>(2, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash379()
{
    char[] cs = new char[100];
    int i = 2;
    char[] cs1 = new char[100];
    int i1 = 4;
    cs[1] = '5';
    cs[2] = '-';
    cs[3] = 'p';
    this.dodash('\0', cs, ref i, cs1, ref i1, -2147483640);
    Assert.AreEqual<int>(4, i);
    Assert.AreEqual<int>(4, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash145()
{
    char[] cs = new char[100];
    int i = 32;
    int i1 = 2;
    cs[31] = 'i';
    cs[32] = '-';
    cs[33] = 't';
    cs[34] = '-';
    this.dodash('\0', cs, ref i, cs, ref i1, 3);
    Assert.AreEqual<int>(35, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash435()
{
    char[] cs = new char[100];
    int i = 12;
    int i1 = 2;
    cs[11] = 'H';
    cs[12] = '-';
    cs[13] = 'S';
    cs[14] = '-';
    cs[15] = '\u0001';
    this.dodash('\0', cs, ref i, cs, ref i1, 3);
    Assert.AreEqual<int>(16, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash702()
{
    char[] cs = new char[100];
    int i = 25;
    char[] cs1 = new char[100];
    int i1 = 2;
    cs[24] = 'b';
    cs[25] = '-';
    cs[26] = 'm';
    cs[27] = '\u0001';
    cs[28] = '\u0001';
    this.dodash('\0', cs, ref i, cs1, ref i1, 3);
    Assert.AreEqual<int>(29, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash73()
{
    char[] cs = new char[100];
    int i = 4;
    char[] cs1 = new char[100];
    int i1 = 2;
    cs[3] = '9';
    cs[4] = '-';
    cs[5] = 'D';
    cs[6] = '-';
    cs[7] = 'R';
    this.dodash('\0', cs, ref i, cs1, ref i1, 3);
    Assert.AreEqual<int>(8, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash164()
{
    char[] cs = new char[100];
    int i = 75;
    char[] cs1 = new char[100];
    int i1 = 3;
    cs[74] = 'I';
    cs[75] = '-';
    cs[76] = 'h';
    this.dodash('\0', cs, ref i, cs1, ref i1, 5);
    Assert.AreEqual<int>(77, i);
    Assert.AreEqual<int>(5, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash439()
{
    char[] cs = new char[100];
    int i = 4;
    int i1 = 2;
    cs[3] = 'g';
    cs[4] = '-';
    cs[5] = 'p';
    cs[6] = '@';
    cs[7] = '@';
    cs[8] = '@';
    cs[9] = '\u0001';
    this.dodash('\0', cs, ref i, cs, ref i1, 3);
    Assert.AreEqual<int>(10, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash214()
{
    char[] cs = new char[100];
    int i = 15;
    int i1 = 2;
    cs[14] = 'a';
    cs[15] = '-';
    cs[16] = 'j';
    cs[17] = '@';
    cs[18] = '@';
    cs[19] = '@';
    cs[20] = '@';
    this.dodash('\0', cs, ref i, cs, ref i1, 3);
    Assert.AreEqual<int>(21, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash654()
{
    char[] cs = new char[100];
    int i = 1;
    char[] cs1 = new char[100];
    int i1 = 2;
    cs[0] = 'i';
    cs[1] = '-';
    cs[2] = 'r';
    cs[3] = '@';
    cs[4] = '@';
    cs[5] = '@';
    cs[6] = '@';
    cs[7] = '\u0001';
    this.dodash('\0', cs, ref i, cs1, ref i1, 3);
    Assert.AreEqual<int>(8, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash309()
{
    char[] cs = new char[100];
    int i = 28;
    char[] cs1 = new char[100];
    int i1 = 2;
    cs[27] = '0';
    cs[28] = '-';
    cs[29] = '9';
    cs[30] = '@';
    cs[31] = '@';
    cs[32] = '\u0001';
    cs[33] = '@';
    cs[34] = '\u0001';
    cs[35] = '@';
    cs[36] = '\u0001';
    this.dodash('\0', cs, ref i, cs1, ref i1, 3);
    Assert.AreEqual<int>(37, i);
    Assert.AreEqual<int>(3, i1);
}
[TestMethod]
[PexGeneratedBy(typeof(BaseVersionTest))]
public void dodash263()
{
    char[] cs = new char[100];
    int i = 14;
    char[] cs1 = new char[100];
    int i1 = 8;
    cs[13] = '3';
    cs[14] = '-';
    cs[15] = '8';
    cs[16] = '-';
    cs[17] = '-';
    cs[18] = '-';
    cs[19] = '\u0001';
    this.dodash(',', cs, ref i, cs1, ref i1, 15);
    Assert.AreEqual<int>(20, i);
    Assert.AreEqual<int>(15, i1);
}
    }
}
